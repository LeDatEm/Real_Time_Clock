
RealTime_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003edc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003fe8  08003fe8  00004fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004004  08004004  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004004  08004004  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004004  08004004  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004004  08004004  00005004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004008  08004008  00005008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800400c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08004018  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08004018  00006114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8a3  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ece  00000000  00000000  000118d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000137a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ed  00000000  00000000  00014460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181f3  00000000  00000000  00014e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010820  00000000  00000000  0002d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af67  00000000  00000000  0003d860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c87c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003608  00000000  00000000  000c880c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000cbe14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fd0 	.word	0x08003fd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003fd0 	.word	0x08003fd0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_fmul>:
 8000988:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800098c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000990:	bf1e      	ittt	ne
 8000992:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000996:	ea92 0f0c 	teqne	r2, ip
 800099a:	ea93 0f0c 	teqne	r3, ip
 800099e:	d06f      	beq.n	8000a80 <__aeabi_fmul+0xf8>
 80009a0:	441a      	add	r2, r3
 80009a2:	ea80 0c01 	eor.w	ip, r0, r1
 80009a6:	0240      	lsls	r0, r0, #9
 80009a8:	bf18      	it	ne
 80009aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009ae:	d01e      	beq.n	80009ee <__aeabi_fmul+0x66>
 80009b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009bc:	fba0 3101 	umull	r3, r1, r0, r1
 80009c0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009c4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009c8:	bf3e      	ittt	cc
 80009ca:	0049      	lslcc	r1, r1, #1
 80009cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009d0:	005b      	lslcc	r3, r3, #1
 80009d2:	ea40 0001 	orr.w	r0, r0, r1
 80009d6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009da:	2afd      	cmp	r2, #253	@ 0xfd
 80009dc:	d81d      	bhi.n	8000a1a <__aeabi_fmul+0x92>
 80009de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	4770      	bx	lr
 80009ee:	f090 0f00 	teq	r0, #0
 80009f2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009f6:	bf08      	it	eq
 80009f8:	0249      	lsleq	r1, r1, #9
 80009fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a02:	3a7f      	subs	r2, #127	@ 0x7f
 8000a04:	bfc2      	ittt	gt
 8000a06:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a0e:	4770      	bxgt	lr
 8000a10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	dc5d      	bgt.n	8000ad8 <__aeabi_fmul+0x150>
 8000a1c:	f112 0f19 	cmn.w	r2, #25
 8000a20:	bfdc      	itt	le
 8000a22:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a26:	4770      	bxle	lr
 8000a28:	f1c2 0200 	rsb	r2, r2, #0
 8000a2c:	0041      	lsls	r1, r0, #1
 8000a2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a32:	f1c2 0220 	rsb	r2, r2, #32
 8000a36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a3e:	f140 0000 	adc.w	r0, r0, #0
 8000a42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a46:	bf08      	it	eq
 8000a48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a4c:	4770      	bx	lr
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a56:	bf02      	ittt	eq
 8000a58:	0040      	lsleq	r0, r0, #1
 8000a5a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a5e:	3a01      	subeq	r2, #1
 8000a60:	d0f9      	beq.n	8000a56 <__aeabi_fmul+0xce>
 8000a62:	ea40 000c 	orr.w	r0, r0, ip
 8000a66:	f093 0f00 	teq	r3, #0
 8000a6a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0049      	lsleq	r1, r1, #1
 8000a72:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a76:	3b01      	subeq	r3, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fmul+0xe6>
 8000a7a:	ea41 010c 	orr.w	r1, r1, ip
 8000a7e:	e78f      	b.n	80009a0 <__aeabi_fmul+0x18>
 8000a80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a84:	ea92 0f0c 	teq	r2, ip
 8000a88:	bf18      	it	ne
 8000a8a:	ea93 0f0c 	teqne	r3, ip
 8000a8e:	d00a      	beq.n	8000aa6 <__aeabi_fmul+0x11e>
 8000a90:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a94:	bf18      	it	ne
 8000a96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a9a:	d1d8      	bne.n	8000a4e <__aeabi_fmul+0xc6>
 8000a9c:	ea80 0001 	eor.w	r0, r0, r1
 8000aa0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000aa4:	4770      	bx	lr
 8000aa6:	f090 0f00 	teq	r0, #0
 8000aaa:	bf17      	itett	ne
 8000aac:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	f091 0f00 	teqne	r1, #0
 8000ab6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000aba:	d014      	beq.n	8000ae6 <__aeabi_fmul+0x15e>
 8000abc:	ea92 0f0c 	teq	r2, ip
 8000ac0:	d101      	bne.n	8000ac6 <__aeabi_fmul+0x13e>
 8000ac2:	0242      	lsls	r2, r0, #9
 8000ac4:	d10f      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ac6:	ea93 0f0c 	teq	r3, ip
 8000aca:	d103      	bne.n	8000ad4 <__aeabi_fmul+0x14c>
 8000acc:	024b      	lsls	r3, r1, #9
 8000ace:	bf18      	it	ne
 8000ad0:	4608      	movne	r0, r1
 8000ad2:	d108      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ad4:	ea80 0001 	eor.w	r0, r0, r1
 8000ad8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000adc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae4:	4770      	bx	lr
 8000ae6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aea:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_fdiv>:
 8000af0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000af4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af8:	bf1e      	ittt	ne
 8000afa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000afe:	ea92 0f0c 	teqne	r2, ip
 8000b02:	ea93 0f0c 	teqne	r3, ip
 8000b06:	d069      	beq.n	8000bdc <__aeabi_fdiv+0xec>
 8000b08:	eba2 0203 	sub.w	r2, r2, r3
 8000b0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b10:	0249      	lsls	r1, r1, #9
 8000b12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b16:	d037      	beq.n	8000b88 <__aeabi_fdiv+0x98>
 8000b18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b24:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	bf38      	it	cc
 8000b2c:	005b      	lslcc	r3, r3, #1
 8000b2e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b32:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b36:	428b      	cmp	r3, r1
 8000b38:	bf24      	itt	cs
 8000b3a:	1a5b      	subcs	r3, r3, r1
 8000b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b44:	bf24      	itt	cs
 8000b46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b52:	bf24      	itt	cs
 8000b54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b60:	bf24      	itt	cs
 8000b62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	bf18      	it	ne
 8000b6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b72:	d1e0      	bne.n	8000b36 <__aeabi_fdiv+0x46>
 8000b74:	2afd      	cmp	r2, #253	@ 0xfd
 8000b76:	f63f af50 	bhi.w	8000a1a <__aeabi_fmul+0x92>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b90:	327f      	adds	r2, #127	@ 0x7f
 8000b92:	bfc2      	ittt	gt
 8000b94:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b9c:	4770      	bxgt	lr
 8000b9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba2:	f04f 0300 	mov.w	r3, #0
 8000ba6:	3a01      	subs	r2, #1
 8000ba8:	e737      	b.n	8000a1a <__aeabi_fmul+0x92>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bb2:	bf02      	ittt	eq
 8000bb4:	0040      	lsleq	r0, r0, #1
 8000bb6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bba:	3a01      	subeq	r2, #1
 8000bbc:	d0f9      	beq.n	8000bb2 <__aeabi_fdiv+0xc2>
 8000bbe:	ea40 000c 	orr.w	r0, r0, ip
 8000bc2:	f093 0f00 	teq	r3, #0
 8000bc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bca:	bf02      	ittt	eq
 8000bcc:	0049      	lsleq	r1, r1, #1
 8000bce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bd2:	3b01      	subeq	r3, #1
 8000bd4:	d0f9      	beq.n	8000bca <__aeabi_fdiv+0xda>
 8000bd6:	ea41 010c 	orr.w	r1, r1, ip
 8000bda:	e795      	b.n	8000b08 <__aeabi_fdiv+0x18>
 8000bdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be0:	ea92 0f0c 	teq	r2, ip
 8000be4:	d108      	bne.n	8000bf8 <__aeabi_fdiv+0x108>
 8000be6:	0242      	lsls	r2, r0, #9
 8000be8:	f47f af7d 	bne.w	8000ae6 <__aeabi_fmul+0x15e>
 8000bec:	ea93 0f0c 	teq	r3, ip
 8000bf0:	f47f af70 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e776      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000bf8:	ea93 0f0c 	teq	r3, ip
 8000bfc:	d104      	bne.n	8000c08 <__aeabi_fdiv+0x118>
 8000bfe:	024b      	lsls	r3, r1, #9
 8000c00:	f43f af4c 	beq.w	8000a9c <__aeabi_fmul+0x114>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e76e      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c08:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c0c:	bf18      	it	ne
 8000c0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c12:	d1ca      	bne.n	8000baa <__aeabi_fdiv+0xba>
 8000c14:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c18:	f47f af5c 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000c1c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c20:	f47f af3c 	bne.w	8000a9c <__aeabi_fmul+0x114>
 8000c24:	e75f      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c26:	bf00      	nop

08000c28 <__aeabi_f2iz>:
 8000c28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c2c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c30:	d30f      	bcc.n	8000c52 <__aeabi_f2iz+0x2a>
 8000c32:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c36:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_f2iz+0x30>
 8000c3c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c44:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c48:	fa23 f002 	lsr.w	r0, r3, r2
 8000c4c:	bf18      	it	ne
 8000c4e:	4240      	negne	r0, r0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr
 8000c58:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c5c:	d101      	bne.n	8000c62 <__aeabi_f2iz+0x3a>
 8000c5e:	0242      	lsls	r2, r0, #9
 8000c60:	d105      	bne.n	8000c6e <__aeabi_f2iz+0x46>
 8000c62:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f04f 0000 	mov.w	r0, #0
 8000c72:	4770      	bx	lr

08000c74 <EOS_init>:

#include "main.h"

void EOS_init(uint32_t delay_ms){
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	uint32_t delay_ticks = delay_ms * (16000000 / 1000);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000c82:	fb02 f303 	mul.w	r3, r2, r3
 8000c86:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = delay_ticks;
 8000c88:	4a06      	ldr	r2, [pc, #24]	@ (8000ca4 <EOS_init+0x30>)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000c8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <EOS_init+0x30>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 7;
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <EOS_init+0x30>)
 8000c96:	2207      	movs	r2, #7
 8000c98:	601a      	str	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <clear>:
    }

    _ledObj->_digitDots      = 0x00;
}

void clear() {
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
    _ledObj->_digitDots = 0x00;
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <clear+0x3c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2020 	strb.w	r2, [r3, #32]

    for (int i = 0; i < 4; i++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	e009      	b.n	8000cd2 <clear+0x2a>
        _ledObj->_digitSets[i] = 0x00; // Set all LEDs off for negative logic
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <clear+0x3c>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3318      	adds	r3, #24
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	ddf2      	ble.n	8000cbe <clear+0x16>
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	20000028 	.word	0x20000028

08000ce8 <setNumber>:
        return;

    _ledObj->_digitDots |= 1 << (pos - 1);
}

void setNumber(int pos, int value) {
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
    if (pos < 1 || pos > 4)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dd14      	ble.n	8000d22 <setNumber+0x3a>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	dc11      	bgt.n	8000d22 <setNumber+0x3a>
        return;

    if (value < 0 || pos > 9)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db10      	blt.n	8000d26 <setNumber+0x3e>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b09      	cmp	r3, #9
 8000d08:	dc0d      	bgt.n	8000d26 <setNumber+0x3e>
        return;

    _ledObj->_digitSets[pos - 1] = digitPatterns[value];
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <setNumber+0x48>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	4808      	ldr	r0, [pc, #32]	@ (8000d34 <setNumber+0x4c>)
 8000d14:	6839      	ldr	r1, [r7, #0]
 8000d16:	4401      	add	r1, r0
 8000d18:	7809      	ldrb	r1, [r1, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
 8000d20:	e002      	b.n	8000d28 <setNumber+0x40>
        return;
 8000d22:	bf00      	nop
 8000d24:	e000      	b.n	8000d28 <setNumber+0x40>
        return;
 8000d26:	bf00      	nop
}
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	20000028 	.word	0x20000028
 8000d34:	08003fe8 	.word	0x08003fe8

08000d38 <setChar>:

void setChar(int pos, SegChars value) {
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
    if (pos < 1 || pos > 4)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	dd55      	ble.n	8000df6 <setChar+0xbe>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	dc52      	bgt.n	8000df6 <setChar+0xbe>
        return;

    switch (value) {
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d850      	bhi.n	8000df8 <setChar+0xc0>
 8000d56:	a201      	add	r2, pc, #4	@ (adr r2, 8000d5c <setChar+0x24>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000d79 	.word	0x08000d79
 8000d60:	08000d8b 	.word	0x08000d8b
 8000d64:	08000d9d 	.word	0x08000d9d
 8000d68:	08000daf 	.word	0x08000daf
 8000d6c:	08000dc1 	.word	0x08000dc1
 8000d70:	08000dd3 	.word	0x08000dd3
 8000d74:	08000de5 	.word	0x08000de5
        case __DASH:
            _ledObj->_digitSets[pos - 1] = digitPatterns[10];
 8000d78:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <setChar+0xc8>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	21bf      	movs	r1, #191	@ 0xbf
 8000d82:	4413      	add	r3, r2
 8000d84:	460a      	mov	r2, r1
 8000d86:	761a      	strb	r2, [r3, #24]
            break;
 8000d88:	e036      	b.n	8000df8 <setChar+0xc0>

        case __UNDERSCORE:
            _ledObj->_digitSets[pos - 1] = digitPatterns[11];
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <setChar+0xc8>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	21f7      	movs	r1, #247	@ 0xf7
 8000d94:	4413      	add	r3, r2
 8000d96:	460a      	mov	r2, r1
 8000d98:	761a      	strb	r2, [r3, #24]
            break;
 8000d9a:	e02d      	b.n	8000df8 <setChar+0xc0>

        case __C:
            _ledObj->_digitSets[pos - 1] = digitPatterns[12];
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <setChar+0xc8>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	21c6      	movs	r1, #198	@ 0xc6
 8000da6:	4413      	add	r3, r2
 8000da8:	460a      	mov	r2, r1
 8000daa:	761a      	strb	r2, [r3, #24]
            break;
 8000dac:	e024      	b.n	8000df8 <setChar+0xc0>

        case __E:
            _ledObj->_digitSets[pos - 1] = digitPatterns[13];
 8000dae:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <setChar+0xc8>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	2186      	movs	r1, #134	@ 0x86
 8000db8:	4413      	add	r3, r2
 8000dba:	460a      	mov	r2, r1
 8000dbc:	761a      	strb	r2, [r3, #24]
            break;
 8000dbe:	e01b      	b.n	8000df8 <setChar+0xc0>

        case __F:
            _ledObj->_digitSets[pos - 1] = digitPatterns[14];
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <setChar+0xc8>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	218e      	movs	r1, #142	@ 0x8e
 8000dca:	4413      	add	r3, r2
 8000dcc:	460a      	mov	r2, r1
 8000dce:	761a      	strb	r2, [r3, #24]
            break;
 8000dd0:	e012      	b.n	8000df8 <setChar+0xc0>

        case __DEGREE:
            _ledObj->_digitSets[pos - 1] = digitPatterns[15];
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <setChar+0xc8>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	219c      	movs	r1, #156	@ 0x9c
 8000ddc:	4413      	add	r3, r2
 8000dde:	460a      	mov	r2, r1
 8000de0:	761a      	strb	r2, [r3, #24]
            break;
 8000de2:	e009      	b.n	8000df8 <setChar+0xc0>

        case __OFF:
            _ledObj->_digitSets[pos - 1] = digitPatterns[16];
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <setChar+0xc8>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	21ff      	movs	r1, #255	@ 0xff
 8000dee:	4413      	add	r3, r2
 8000df0:	460a      	mov	r2, r1
 8000df2:	761a      	strb	r2, [r3, #24]
            break;
 8000df4:	e000      	b.n	8000df8 <setChar+0xc0>
        return;
 8000df6:	bf00      	nop
    }
}
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	20000028 	.word	0x20000028

08000e04 <show>:

void show() {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	e00f      	b.n	8000e30 <show+0x2c>
        _ledObj->_digitValues[i] = _ledObj->_digitSets[i];
 8000e10:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <show+0x40>)
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <show+0x40>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3318      	adds	r3, #24
 8000e1e:	7819      	ldrb	r1, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4413      	add	r3, r2
 8000e24:	331c      	adds	r3, #28
 8000e26:	460a      	mov	r2, r1
 8000e28:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	ddec      	ble.n	8000e10 <show+0xc>
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000028 	.word	0x20000028

08000e48 <loop>:

void loop() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	e03c      	b.n	8000ece <loop+0x86>
        int digit = 0x08 >> i;
 8000e54:	2208      	movs	r2, #8
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	fa42 f303 	asr.w	r3, r2, r3
 8000e5c:	607b      	str	r3, [r7, #4]
        int value = _ledObj->_digitValues[i];
 8000e5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <loop+0x98>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4413      	add	r3, r2
 8000e66:	331c      	adds	r3, #28
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	60bb      	str	r3, [r7, #8]

        if (_ledObj->_digitDots & (1 << i))
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <loop+0x98>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e74:	461a      	mov	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	fa42 f303 	asr.w	r3, r2, r3
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <loop+0x44>
            value &= 0x7F;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e8a:	60bb      	str	r3, [r7, #8]
        shift(digit);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 f827 	bl	8000ee4 <shift>
        shift(value);
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f822 	bl	8000ee4 <shift>


        // RCLK LOW and HIGH level settings
        HAL_GPIO_WritePin(_ledObj->rclkPort, _ledObj->rclkPin, RESET);
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <loop+0x98>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68d8      	ldr	r0, [r3, #12]
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <loop+0x98>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	891b      	ldrh	r3, [r3, #8]
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f001 fe54 	bl	8002b5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(_ledObj->rclkPort, _ledObj->rclkPin, SET);
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <loop+0x98>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68d8      	ldr	r0, [r3, #12]
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <loop+0x98>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	891b      	ldrh	r3, [r3, #8]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f001 fe4a 	bl	8002b5c <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; i++) {
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	ddbf      	ble.n	8000e54 <loop+0xc>
    }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000028 	.word	0x20000028

08000ee4 <shift>:

void shift(uint8_t value) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 8; i >= 1; i--) {
 8000eee:	2308      	movs	r3, #8
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e032      	b.n	8000f5a <shift+0x76>
        if (!(value & 0x80)) // Inverse logic for negative common cathode display
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <shift+0x2e>
            HAL_GPIO_WritePin(_ledObj->dioPort, _ledObj->dioPin, SET);
 8000efc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <shift+0x88>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6958      	ldr	r0, [r3, #20]
 8000f02:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <shift+0x88>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	8a1b      	ldrh	r3, [r3, #16]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f001 fe26 	bl	8002b5c <HAL_GPIO_WritePin>
 8000f10:	e009      	b.n	8000f26 <shift+0x42>
        else
            HAL_GPIO_WritePin(_ledObj->dioPort, _ledObj->dioPin, RESET);
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <shift+0x88>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6958      	ldr	r0, [r3, #20]
 8000f18:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <shift+0x88>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	8a1b      	ldrh	r3, [r3, #16]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4619      	mov	r1, r3
 8000f22:	f001 fe1b 	bl	8002b5c <HAL_GPIO_WritePin>

        value <<= 1;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	71fb      	strb	r3, [r7, #7]
        HAL_GPIO_WritePin(_ledObj->sclkPort, _ledObj->sclkPin, RESET);
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <shift+0x88>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6858      	ldr	r0, [r3, #4]
 8000f32:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <shift+0x88>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f001 fe0e 	bl	8002b5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(_ledObj->sclkPort, _ledObj->sclkPin, SET);
 8000f40:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <shift+0x88>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6858      	ldr	r0, [r3, #4]
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <shift+0x88>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f001 fe04 	bl	8002b5c <HAL_GPIO_WritePin>
    for (uint8_t i = 8; i >= 1; i--) {
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1c9      	bne.n	8000ef4 <shift+0x10>
    }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000028 	.word	0x20000028

08000f70 <setInt>:

void setInt(int number, bool zeroPadding) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
    if (number > 9999) // trim
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f82:	4293      	cmp	r3, r2
 8000f84:	dd0d      	ble.n	8000fa2 <setInt+0x32>
        number %=  10000;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4a      	ldr	r2, [pc, #296]	@ (80010b4 <setInt+0x144>)
 8000f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8e:	1311      	asrs	r1, r2, #12
 8000f90:	17da      	asrs	r2, r3, #31
 8000f92:	1a8a      	subs	r2, r1, r2
 8000f94:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000f98:	fb01 f202 	mul.w	r2, r1, r2
 8000f9c:	1a9b      	subs	r3, r3, r2
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	e010      	b.n	8000fc4 <setInt+0x54>
    else if (number < -999) // trim
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000fa8:	dc0c      	bgt.n	8000fc4 <setInt+0x54>
        number %= 1000;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a42      	ldr	r2, [pc, #264]	@ (80010b8 <setInt+0x148>)
 8000fae:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb2:	1191      	asrs	r1, r2, #6
 8000fb4:	17da      	asrs	r2, r3, #31
 8000fb6:	1a8a      	subs	r2, r1, r2
 8000fb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fbc:	fb01 f202 	mul.w	r2, r1, r2
 8000fc0:	1a9b      	subs	r3, r3, r2
 8000fc2:	607b      	str	r3, [r7, #4]

    int digitNum = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
    int numberAbs = abs(number);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bfb8      	it	lt
 8000fce:	425b      	neglt	r3, r3
 8000fd0:	613b      	str	r3, [r7, #16]

    if (numberAbs <= 9999 && numberAbs >= 1000)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	dc06      	bgt.n	8000fea <setInt+0x7a>
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fe2:	db02      	blt.n	8000fea <setInt+0x7a>
        digitNum = 4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	e01a      	b.n	8001020 <setInt+0xb0>
    else  if (numberAbs <= 999 && numberAbs >= 100)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ff0:	da05      	bge.n	8000ffe <setInt+0x8e>
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	2b63      	cmp	r3, #99	@ 0x63
 8000ff6:	dd02      	ble.n	8000ffe <setInt+0x8e>
        digitNum = 3;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	e010      	b.n	8001020 <setInt+0xb0>
    else if (numberAbs <= 99 && numberAbs >= 10)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b63      	cmp	r3, #99	@ 0x63
 8001002:	dc05      	bgt.n	8001010 <setInt+0xa0>
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2b09      	cmp	r3, #9
 8001008:	dd02      	ble.n	8001010 <setInt+0xa0>
        digitNum = 2;
 800100a:	2302      	movs	r3, #2
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e007      	b.n	8001020 <setInt+0xb0>
    else if (numberAbs <= 9 && numberAbs >= 0)
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	2b09      	cmp	r3, #9
 8001014:	dc04      	bgt.n	8001020 <setInt+0xb0>
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db01      	blt.n	8001020 <setInt+0xb0>
        digitNum = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]

    if (number < 0)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	da02      	bge.n	800102c <setInt+0xbc>
        digitNum++;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3301      	adds	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]

    int denominator = 10000;
 800102c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001030:	61bb      	str	r3, [r7, #24]
    for (int pos = 1; pos <= 4; pos++) {
 8001032:	2301      	movs	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e035      	b.n	80010a4 <setInt+0x134>
        denominator /= 10;
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	4a20      	ldr	r2, [pc, #128]	@ (80010bc <setInt+0x14c>)
 800103c:	fb82 1203 	smull	r1, r2, r2, r3
 8001040:	1092      	asrs	r2, r2, #2
 8001042:	17db      	asrs	r3, r3, #31
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	61bb      	str	r3, [r7, #24]
        if (!zeroPadding && pos <= (4 - digitNum))
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	f083 0301 	eor.w	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <setInt+0xf0>
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0304 	rsb	r3, r3, #4
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	dd1d      	ble.n	800109c <setInt+0x12c>
            continue;

        if (number < 0) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	da07      	bge.n	8001076 <setInt+0x106>
            setChar(pos, __DASH); // set - at the 1st digit
 8001066:	2100      	movs	r1, #0
 8001068:	6978      	ldr	r0, [r7, #20]
 800106a:	f7ff fe65 	bl	8000d38 <setChar>
            number *= -1;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	425b      	negs	r3, r3
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	e013      	b.n	800109e <setInt+0x12e>
        } else {
            int digit = number / denominator;
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fb92 f3f3 	sdiv	r3, r2, r3
 800107e:	60fb      	str	r3, [r7, #12]
            number = number % denominator;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	fb93 f2f2 	sdiv	r2, r3, r2
 8001088:	69b9      	ldr	r1, [r7, #24]
 800108a:	fb01 f202 	mul.w	r2, r1, r2
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	607b      	str	r3, [r7, #4]
            setNumber(pos, digit);
 8001092:	68f9      	ldr	r1, [r7, #12]
 8001094:	6978      	ldr	r0, [r7, #20]
 8001096:	f7ff fe27 	bl	8000ce8 <setNumber>
 800109a:	e000      	b.n	800109e <setInt+0x12e>
            continue;
 800109c:	bf00      	nop
    for (int pos = 1; pos <= 4; pos++) {
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	ddc6      	ble.n	8001038 <setInt+0xc8>
        }
    }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	68db8bad 	.word	0x68db8bad
 80010b8:	10624dd3 	.word	0x10624dd3
 80010bc:	66666667 	.word	0x66666667

080010c0 <printInt>:

void printInt(int number, bool zeroPadding) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
    clear();
 80010cc:	f7ff fdec 	bl	8000ca8 <clear>
    setInt(number, zeroPadding);
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	4619      	mov	r1, r3
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff4b 	bl	8000f70 <setInt>
    show(); // show on the display
 80010da:	f7ff fe93 	bl	8000e04 <show>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <decToBcd>:
#include "main.h"
#include "ds3231.h"

RTC_TIME rtcTime;

uint8_t decToBcd(int val) {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    return (uint8_t)((val / 10 * 16) + (val % 10));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a0e      	ldr	r2, [pc, #56]	@ (800112c <decToBcd+0x44>)
 80010f4:	fb82 1203 	smull	r1, r2, r2, r3
 80010f8:	1092      	asrs	r2, r2, #2
 80010fa:	17db      	asrs	r3, r3, #31
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	b2d8      	uxtb	r0, r3
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <decToBcd+0x44>)
 8001108:	fb83 1302 	smull	r1, r3, r3, r2
 800110c:	1099      	asrs	r1, r3, #2
 800110e:	17d3      	asrs	r3, r2, #31
 8001110:	1ac9      	subs	r1, r1, r3
 8001112:	460b      	mov	r3, r1
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	1ad1      	subs	r1, r2, r3
 800111c:	b2cb      	uxtb	r3, r1
 800111e:	4403      	add	r3, r0
 8001120:	b2db      	uxtb	r3, r3
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	66666667 	.word	0x66666667

08001130 <bcdToDec>:

int bcdToDec(uint8_t val) {
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
    return (int)((val / 16 * 10) + (val % 16));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	b2db      	uxtb	r3, r3
 8001140:	461a      	mov	r2, r3
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	461a      	mov	r2, r3
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	4413      	add	r3, r2
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
	...

08001160 <Set_Time>:

void Set_Time(uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b089      	sub	sp, #36	@ 0x24
 8001164:	af04      	add	r7, sp, #16
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	71fb      	strb	r3, [r7, #7]
 8001172:	4603      	mov	r3, r0
 8001174:	71bb      	strb	r3, [r7, #6]
 8001176:	460b      	mov	r3, r1
 8001178:	717b      	strb	r3, [r7, #5]
 800117a:	4613      	mov	r3, r2
 800117c:	713b      	strb	r3, [r7, #4]
    uint8_t set_time[7];
    set_time[0] = decToBcd(sec);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ffb1 	bl	80010e8 <decToBcd>
 8001186:	4603      	mov	r3, r0
 8001188:	723b      	strb	r3, [r7, #8]
    set_time[1] = decToBcd(min);
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ffab 	bl	80010e8 <decToBcd>
 8001192:	4603      	mov	r3, r0
 8001194:	727b      	strb	r3, [r7, #9]
    set_time[2] = decToBcd(hour);
 8001196:	797b      	ldrb	r3, [r7, #5]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ffa5 	bl	80010e8 <decToBcd>
 800119e:	4603      	mov	r3, r0
 80011a0:	72bb      	strb	r3, [r7, #10]
    set_time[3] = decToBcd(dow);
 80011a2:	793b      	ldrb	r3, [r7, #4]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff9f 	bl	80010e8 <decToBcd>
 80011aa:	4603      	mov	r3, r0
 80011ac:	72fb      	strb	r3, [r7, #11]
    set_time[4] = decToBcd(dom);
 80011ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff98 	bl	80010e8 <decToBcd>
 80011b8:	4603      	mov	r3, r0
 80011ba:	733b      	strb	r3, [r7, #12]
    set_time[5] = decToBcd(month);
 80011bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff91 	bl	80010e8 <decToBcd>
 80011c6:	4603      	mov	r3, r0
 80011c8:	737b      	strb	r3, [r7, #13]
    set_time[6] = decToBcd(year);
 80011ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff8a 	bl	80010e8 <decToBcd>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73bb      	strb	r3, [r7, #14]

    HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 80011d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	2307      	movs	r3, #7
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	2200      	movs	r2, #0
 80011ec:	21d0      	movs	r1, #208	@ 0xd0
 80011ee:	4803      	ldr	r0, [pc, #12]	@ (80011fc <Set_Time+0x9c>)
 80011f0:	f001 fe10 	bl	8002e14 <HAL_I2C_Mem_Write>
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd90      	pop	{r4, r7, pc}
 80011fc:	20000034 	.word	0x20000034

08001200 <Get_Time>:

void Get_Time(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
    uint8_t get_time[7];
    HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	2307      	movs	r3, #7
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	463b      	mov	r3, r7
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	2200      	movs	r2, #0
 8001218:	21d0      	movs	r1, #208	@ 0xd0
 800121a:	481f      	ldr	r0, [pc, #124]	@ (8001298 <Get_Time+0x98>)
 800121c:	f001 fef4 	bl	8003008 <HAL_I2C_Mem_Read>
    rtcTime.seconds = bcdToDec(get_time[0]);
 8001220:	783b      	ldrb	r3, [r7, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff84 	bl	8001130 <bcdToDec>
 8001228:	4603      	mov	r3, r0
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <Get_Time+0x9c>)
 800122e:	701a      	strb	r2, [r3, #0]
    rtcTime.minutes = bcdToDec(get_time[1]);
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff7c 	bl	8001130 <bcdToDec>
 8001238:	4603      	mov	r3, r0
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b17      	ldr	r3, [pc, #92]	@ (800129c <Get_Time+0x9c>)
 800123e:	705a      	strb	r2, [r3, #1]
    rtcTime.hour = bcdToDec(get_time[2]);
 8001240:	78bb      	ldrb	r3, [r7, #2]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff74 	bl	8001130 <bcdToDec>
 8001248:	4603      	mov	r3, r0
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <Get_Time+0x9c>)
 800124e:	709a      	strb	r2, [r3, #2]
    rtcTime.dayofweek = bcdToDec(get_time[3]);
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff6c 	bl	8001130 <bcdToDec>
 8001258:	4603      	mov	r3, r0
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <Get_Time+0x9c>)
 800125e:	70da      	strb	r2, [r3, #3]
    rtcTime.dayofmonth = bcdToDec(get_time[4]);
 8001260:	793b      	ldrb	r3, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff64 	bl	8001130 <bcdToDec>
 8001268:	4603      	mov	r3, r0
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <Get_Time+0x9c>)
 800126e:	711a      	strb	r2, [r3, #4]
    rtcTime.month = bcdToDec(get_time[5]);
 8001270:	797b      	ldrb	r3, [r7, #5]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff5c 	bl	8001130 <bcdToDec>
 8001278:	4603      	mov	r3, r0
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b07      	ldr	r3, [pc, #28]	@ (800129c <Get_Time+0x9c>)
 800127e:	715a      	strb	r2, [r3, #5]
    rtcTime.year = bcdToDec(get_time[6]);
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff54 	bl	8001130 <bcdToDec>
 8001288:	4603      	mov	r3, r0
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b03      	ldr	r3, [pc, #12]	@ (800129c <Get_Time+0x9c>)
 800128e:	719a      	strb	r2, [r3, #6]
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000034 	.word	0x20000034
 800129c:	2000002c 	.word	0x2000002c

080012a0 <Get_Temp>:

float Get_Temp(void) {
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af04      	add	r7, sp, #16
    uint8_t temp[2];
    HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x11, 1, temp, 2, 1000);
 80012a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	2302      	movs	r3, #2
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	2211      	movs	r2, #17
 80012b8:	21d0      	movs	r1, #208	@ 0xd0
 80012ba:	4812      	ldr	r0, [pc, #72]	@ (8001304 <Get_Temp+0x64>)
 80012bc:	f001 fea4 	bl	8003008 <HAL_I2C_Mem_Read>
    return ((temp[0]) + (temp[1] >> 6) / 4.0);
 80012c0:	793b      	ldrb	r3, [r7, #4]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f894 	bl	80003f0 <__aeabi_i2d>
 80012c8:	4604      	mov	r4, r0
 80012ca:	460d      	mov	r5, r1
 80012cc:	797b      	ldrb	r3, [r7, #5]
 80012ce:	099b      	lsrs	r3, r3, #6
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f88c 	bl	80003f0 <__aeabi_i2d>
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <Get_Temp+0x68>)
 80012de:	f7ff fa1b 	bl	8000718 <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4620      	mov	r0, r4
 80012e8:	4629      	mov	r1, r5
 80012ea:	f7fe ff35 	bl	8000158 <__adddf3>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff faf7 	bl	80008e8 <__aeabi_d2f>
 80012fa:	4603      	mov	r3, r0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bdb0      	pop	{r4, r5, r7, pc}
 8001304:	20000034 	.word	0x20000034
 8001308:	40100000 	.word	0x40100000

0800130c <force_temp_conv>:

void force_temp_conv(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af04      	add	r7, sp, #16
    uint8_t status = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	71fb      	strb	r3, [r7, #7]
    uint8_t control = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status, 1, 100); // read status register
 800131a:	2364      	movs	r3, #100	@ 0x64
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	220f      	movs	r2, #15
 800132a:	21d0      	movs	r1, #208	@ 0xd0
 800132c:	4813      	ldr	r0, [pc, #76]	@ (800137c <force_temp_conv+0x70>)
 800132e:	f001 fe6b 	bl	8003008 <HAL_I2C_Mem_Read>
    if (!(status & 0x04)) {
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d11b      	bne.n	8001374 <force_temp_conv+0x68>
        HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &control, 1, 100); // read control register
 800133c:	2364      	movs	r3, #100	@ 0x64
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	2301      	movs	r3, #1
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	1dbb      	adds	r3, r7, #6
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2301      	movs	r3, #1
 800134a:	220e      	movs	r2, #14
 800134c:	21d0      	movs	r1, #208	@ 0xd0
 800134e:	480b      	ldr	r0, [pc, #44]	@ (800137c <force_temp_conv+0x70>)
 8001350:	f001 fe5a 	bl	8003008 <HAL_I2C_Mem_Read>
        HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x0E, 1, (uint8_t *)(control | (0x20)), 1, 100);
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	f043 0320 	orr.w	r3, r3, #32
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	2364      	movs	r3, #100	@ 0x64
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2301      	movs	r3, #1
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	9200      	str	r2, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	220e      	movs	r2, #14
 800136c:	21d0      	movs	r1, #208	@ 0xd0
 800136e:	4803      	ldr	r0, [pc, #12]	@ (800137c <force_temp_conv+0x70>)
 8001370:	f001 fd50 	bl	8002e14 <HAL_I2C_Mem_Write>
    }
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000034 	.word	0x20000034

08001380 <read_encoder>:
#include "main.h"

extern TIM_HandleTypeDef htim2;


int read_encoder(void){
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
	int read = __HAL_TIM_GET_COUNTER(&htim2);
 8001386:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <read_encoder+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138c:	607b      	str	r3, [r7, #4]
	if(read <=0){
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	dc01      	bgt.n	8001398 <read_encoder+0x18>
		read = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
	}
	return read;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	20000088 	.word	0x20000088

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ac:	f000 f8ba 	bl	8001524 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013b0:	f000 f836 	bl	8001420 <MX_I2C1_Init>
  MX_TIM2_Init();
 80013b4:	f000 f862 	bl	800147c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  EOS_init(1000);
 80013b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013bc:	f7ff fc5a 	bl	8000c74 <EOS_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((GPIOB->IDR & GPIO_PIN_0)){
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <main+0x6c>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <main+0x30>
		 mode(TEMP);
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <main+0x70>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fc45 	bl	8001c60 <mode>
 80013d6:	e7f3      	b.n	80013c0 <main+0x18>
	  } else {
		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80013d8:	2101      	movs	r1, #1
 80013da:	2000      	movs	r0, #0
 80013dc:	f002 fc30 	bl	8003c40 <HAL_PWR_EnterSLEEPMode>
		  GPIOA->BSRR = GPIO_PIN_3 << 16;
 80013e0:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <main+0x74>)
 80013e2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80013e6:	611a      	str	r2, [r3, #16]
		  GPIOA->BSRR = GPIO_PIN_4 << 16;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <main+0x74>)
 80013ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80013ee:	611a      	str	r2, [r3, #16]
		  setChar(1, __OFF);
 80013f0:	2106      	movs	r1, #6
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff fca0 	bl	8000d38 <setChar>
		  setChar(2, __OFF);
 80013f8:	2106      	movs	r1, #6
 80013fa:	2002      	movs	r0, #2
 80013fc:	f7ff fc9c 	bl	8000d38 <setChar>
		  setChar(3, __OFF);
 8001400:	2106      	movs	r1, #6
 8001402:	2003      	movs	r0, #3
 8001404:	f7ff fc98 	bl	8000d38 <setChar>
		  setChar(4, __OFF);
 8001408:	2106      	movs	r1, #6
 800140a:	2004      	movs	r0, #4
 800140c:	f7ff fc94 	bl	8000d38 <setChar>
	  if((GPIOB->IDR & GPIO_PIN_0)){
 8001410:	e7d6      	b.n	80013c0 <main+0x18>
 8001412:	bf00      	nop
 8001414:	40010c00 	.word	0x40010c00
 8001418:	200000d0 	.word	0x200000d0
 800141c:	40010800 	.word	0x40010800

08001420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001426:	4a13      	ldr	r2, [pc, #76]	@ (8001474 <MX_I2C1_Init+0x54>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_I2C1_Init+0x50>)
 800142c:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <MX_I2C1_Init+0x58>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_I2C1_Init+0x50>)
 800143e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_I2C1_Init+0x50>)
 800145e:	f001 fb95 	bl	8002b8c <HAL_I2C_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001468:	f000 f8e6 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000034 	.word	0x20000034
 8001474:	40005400 	.word	0x40005400
 8001478:	00061a80 	.word	0x00061a80

0800147c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	@ 0x30
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	2224      	movs	r2, #36	@ 0x24
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f002 fd74 	bl	8003f78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001498:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <MX_TIM2_Init+0xa4>)
 800149a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800149e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <MX_TIM2_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <MX_TIM2_Init+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <MX_TIM2_Init+0xa4>)
 80014ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_TIM2_Init+0xa4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <MX_TIM2_Init+0xa4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014c8:	2301      	movs	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014d8:	2301      	movs	r3, #1
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	480d      	ldr	r0, [pc, #52]	@ (8001520 <MX_TIM2_Init+0xa4>)
 80014ec:	f002 fbe2 	bl	8003cb4 <HAL_TIM_Encoder_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014f6:	f000 f89f 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	@ (8001520 <MX_TIM2_Init+0xa4>)
 8001508:	f002 fcd8 	bl	8003ebc <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001512:	f000 f891 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	3730      	adds	r7, #48	@ 0x30
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000088 	.word	0x20000088

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001538:	4b33      	ldr	r3, [pc, #204]	@ (8001608 <MX_GPIO_Init+0xe4>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a32      	ldr	r2, [pc, #200]	@ (8001608 <MX_GPIO_Init+0xe4>)
 800153e:	f043 0320 	orr.w	r3, r3, #32
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b30      	ldr	r3, [pc, #192]	@ (8001608 <MX_GPIO_Init+0xe4>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <MX_GPIO_Init+0xe4>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <MX_GPIO_Init+0xe4>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <MX_GPIO_Init+0xe4>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <MX_GPIO_Init+0xe4>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a26      	ldr	r2, [pc, #152]	@ (8001608 <MX_GPIO_Init+0xe4>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <MX_GPIO_Init+0xe4>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10
 8001580:	2200      	movs	r2, #0
 8001582:	f640 6118 	movw	r1, #3608	@ 0xe18
 8001586:	4821      	ldr	r0, [pc, #132]	@ (800160c <MX_GPIO_Init+0xe8>)
 8001588:	f001 fae8 	bl	8002b5c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2102      	movs	r1, #2
 8001590:	481f      	ldr	r0, [pc, #124]	@ (8001610 <MX_GPIO_Init+0xec>)
 8001592:	f001 fae3 	bl	8002b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001596:	2304      	movs	r3, #4
 8001598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4619      	mov	r1, r3
 80015a8:	4818      	ldr	r0, [pc, #96]	@ (800160c <MX_GPIO_Init+0xe8>)
 80015aa:	f001 f953 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA9 PA10
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10
 80015ae:	f640 6318 	movw	r3, #3608	@ 0xe18
 80015b2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2302      	movs	r3, #2
 80015be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	4619      	mov	r1, r3
 80015c6:	4811      	ldr	r0, [pc, #68]	@ (800160c <MX_GPIO_Init+0xe8>)
 80015c8:	f001 f944 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015cc:	2301      	movs	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4619      	mov	r1, r3
 80015de:	480c      	ldr	r0, [pc, #48]	@ (8001610 <MX_GPIO_Init+0xec>)
 80015e0:	f001 f938 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015e4:	2302      	movs	r3, #2
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2302      	movs	r3, #2
 80015f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_GPIO_Init+0xec>)
 80015fc:	f001 f92a 	bl	8002854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	40010800 	.word	0x40010800
 8001610:	40010c00 	.word	0x40010c00

08001614 <SysTick_Handler>:

/* USER CODE BEGIN 4 */
void SysTick_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	Get_Time();
 8001618:	f7ff fdf2 	bl	8001200 <Get_Time>
	force_temp_conv();
 800161c:	f7ff fe76 	bl	800130c <force_temp_conv>
	TEMP = Get_Temp();
 8001620:	f7ff fe3e 	bl	80012a0 <Get_Temp>
 8001624:	4603      	mov	r3, r0
 8001626:	4a03      	ldr	r2, [pc, #12]	@ (8001634 <SysTick_Handler+0x20>)
 8001628:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162a:	f001 f8f7 	bl	800281c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200000d0 	.word	0x200000d0

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <Error_Handler+0x8>

08001644 <blink_led>:
uint8_t delay_counter = 0;
uint8_t alarm_hour, alarm_minute;
uint16_t second, minute, hour, dayw, day, month, year = 2024;
uint16_t new_second, new_minute, new_hour, new_day, new_month, new_year;

void blink_led(){
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
	int currentSecond = second;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <blink_led+0x40>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	607b      	str	r3, [r7, #4]
	if (currentSecond != previousSecond) {
 8001650:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <blink_led+0x44>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	d00f      	beq.n	800167a <blink_led+0x36>
		previousSecond = currentSecond;
 800165a:	4a0b      	ldr	r2, [pc, #44]	@ (8001688 <blink_led+0x44>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6013      	str	r3, [r2, #0]
		if (currentSecond % 2 == 0) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d103      	bne.n	8001672 <blink_led+0x2e>
			GPIOA->BSRR = GPIO_PIN_3;
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <blink_led+0x48>)
 800166c:	2208      	movs	r2, #8
 800166e:	611a      	str	r2, [r3, #16]
		} else {
			GPIOA->BSRR = GPIO_PIN_3 << 16;
		}
	}
}
 8001670:	e003      	b.n	800167a <blink_led+0x36>
			GPIOA->BSRR = GPIO_PIN_3 << 16;
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <blink_led+0x48>)
 8001674:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001678:	611a      	str	r2, [r3, #16]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	200000f0 	.word	0x200000f0
 8001688:	200000e0 	.word	0x200000e0
 800168c:	40010800 	.word	0x40010800

08001690 <encoder_Inc_Dec>:

void encoder_Inc_Dec(){
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

	if (encoderValue != previousEncoderValue && ButtonCount == 1 && currentMode == MODE_MIN_SEC) {
 8001694:	4b7e      	ldr	r3, [pc, #504]	@ (8001890 <encoder_Inc_Dec+0x200>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b7e      	ldr	r3, [pc, #504]	@ (8001894 <encoder_Inc_Dec+0x204>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d045      	beq.n	800172c <encoder_Inc_Dec+0x9c>
 80016a0:	4b7d      	ldr	r3, [pc, #500]	@ (8001898 <encoder_Inc_Dec+0x208>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d141      	bne.n	800172c <encoder_Inc_Dec+0x9c>
 80016a8:	4b7c      	ldr	r3, [pc, #496]	@ (800189c <encoder_Inc_Dec+0x20c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d13d      	bne.n	800172c <encoder_Inc_Dec+0x9c>
		if (encoderValue > previousEncoderValue) {
 80016b0:	4b77      	ldr	r3, [pc, #476]	@ (8001890 <encoder_Inc_Dec+0x200>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b77      	ldr	r3, [pc, #476]	@ (8001894 <encoder_Inc_Dec+0x204>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dd05      	ble.n	80016c8 <encoder_Inc_Dec+0x38>
			modeTimeCount++;
 80016bc:	4b78      	ldr	r3, [pc, #480]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a77      	ldr	r2, [pc, #476]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e004      	b.n	80016d2 <encoder_Inc_Dec+0x42>
		} else {
			modeTimeCount--;
 80016c8:	4b75      	ldr	r3, [pc, #468]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	4a74      	ldr	r2, [pc, #464]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 80016d0:	6013      	str	r3, [r2, #0]
		}

		previousEncoderValue = encoderValue;
 80016d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001890 <encoder_Inc_Dec+0x200>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001894 <encoder_Inc_Dec+0x204>)
 80016d8:	6013      	str	r3, [r2, #0]

		if (modeTimeCount >= 1) {
 80016da:	4b71      	ldr	r3, [pc, #452]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	dd10      	ble.n	8001704 <encoder_Inc_Dec+0x74>
			modeTimeCount = 0;
 80016e2:	4b6f      	ldr	r3, [pc, #444]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
			if (++new_minute > 59) {
 80016e8:	4b6e      	ldr	r3, [pc, #440]	@ (80018a4 <encoder_Inc_Dec+0x214>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b6c      	ldr	r3, [pc, #432]	@ (80018a4 <encoder_Inc_Dec+0x214>)
 80016f2:	801a      	strh	r2, [r3, #0]
 80016f4:	4b6b      	ldr	r3, [pc, #428]	@ (80018a4 <encoder_Inc_Dec+0x214>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80016fa:	d917      	bls.n	800172c <encoder_Inc_Dec+0x9c>
				new_minute = 0;
 80016fc:	4b69      	ldr	r3, [pc, #420]	@ (80018a4 <encoder_Inc_Dec+0x214>)
 80016fe:	2200      	movs	r2, #0
 8001700:	801a      	strh	r2, [r3, #0]
 8001702:	e013      	b.n	800172c <encoder_Inc_Dec+0x9c>
			}
		} else if (modeTimeCount <= -1) {
 8001704:	4b66      	ldr	r3, [pc, #408]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	da0f      	bge.n	800172c <encoder_Inc_Dec+0x9c>
			modeTimeCount = 0;
 800170c:	4b64      	ldr	r3, [pc, #400]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
			if (--new_minute <= 0) {
 8001712:	4b64      	ldr	r3, [pc, #400]	@ (80018a4 <encoder_Inc_Dec+0x214>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b62      	ldr	r3, [pc, #392]	@ (80018a4 <encoder_Inc_Dec+0x214>)
 800171c:	801a      	strh	r2, [r3, #0]
 800171e:	4b61      	ldr	r3, [pc, #388]	@ (80018a4 <encoder_Inc_Dec+0x214>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <encoder_Inc_Dec+0x9c>
				new_minute = 59;
 8001726:	4b5f      	ldr	r3, [pc, #380]	@ (80018a4 <encoder_Inc_Dec+0x214>)
 8001728:	223b      	movs	r2, #59	@ 0x3b
 800172a:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	if (encoderValue != previousEncoderValue && ButtonCount == 2 && currentMode == MODE_MIN_SEC) {
 800172c:	4b58      	ldr	r3, [pc, #352]	@ (8001890 <encoder_Inc_Dec+0x200>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b58      	ldr	r3, [pc, #352]	@ (8001894 <encoder_Inc_Dec+0x204>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d045      	beq.n	80017c4 <encoder_Inc_Dec+0x134>
 8001738:	4b57      	ldr	r3, [pc, #348]	@ (8001898 <encoder_Inc_Dec+0x208>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d141      	bne.n	80017c4 <encoder_Inc_Dec+0x134>
 8001740:	4b56      	ldr	r3, [pc, #344]	@ (800189c <encoder_Inc_Dec+0x20c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d13d      	bne.n	80017c4 <encoder_Inc_Dec+0x134>
			if (encoderValue > previousEncoderValue) {
 8001748:	4b51      	ldr	r3, [pc, #324]	@ (8001890 <encoder_Inc_Dec+0x200>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b51      	ldr	r3, [pc, #324]	@ (8001894 <encoder_Inc_Dec+0x204>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	dd05      	ble.n	8001760 <encoder_Inc_Dec+0xd0>
				modeTimeCount++;
 8001754:	4b52      	ldr	r3, [pc, #328]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	4a51      	ldr	r2, [pc, #324]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e004      	b.n	800176a <encoder_Inc_Dec+0xda>
			} else {
				modeTimeCount--;
 8001760:	4b4f      	ldr	r3, [pc, #316]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3b01      	subs	r3, #1
 8001766:	4a4e      	ldr	r2, [pc, #312]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 8001768:	6013      	str	r3, [r2, #0]
			}

			previousEncoderValue = encoderValue;
 800176a:	4b49      	ldr	r3, [pc, #292]	@ (8001890 <encoder_Inc_Dec+0x200>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a49      	ldr	r2, [pc, #292]	@ (8001894 <encoder_Inc_Dec+0x204>)
 8001770:	6013      	str	r3, [r2, #0]

			if (modeTimeCount >= 1) {
 8001772:	4b4b      	ldr	r3, [pc, #300]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	dd10      	ble.n	800179c <encoder_Inc_Dec+0x10c>
				modeTimeCount = 0;
 800177a:	4b49      	ldr	r3, [pc, #292]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
				if (++new_second > 59) {
 8001780:	4b49      	ldr	r3, [pc, #292]	@ (80018a8 <encoder_Inc_Dec+0x218>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <encoder_Inc_Dec+0x218>)
 800178a:	801a      	strh	r2, [r3, #0]
 800178c:	4b46      	ldr	r3, [pc, #280]	@ (80018a8 <encoder_Inc_Dec+0x218>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	2b3b      	cmp	r3, #59	@ 0x3b
 8001792:	d917      	bls.n	80017c4 <encoder_Inc_Dec+0x134>
					new_second = 0;
 8001794:	4b44      	ldr	r3, [pc, #272]	@ (80018a8 <encoder_Inc_Dec+0x218>)
 8001796:	2200      	movs	r2, #0
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	e013      	b.n	80017c4 <encoder_Inc_Dec+0x134>
				}
			} else if (modeTimeCount <= -1) {
 800179c:	4b40      	ldr	r3, [pc, #256]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	da0f      	bge.n	80017c4 <encoder_Inc_Dec+0x134>
				modeTimeCount = 0;
 80017a4:	4b3e      	ldr	r3, [pc, #248]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
				if (--new_second <= 0) {
 80017aa:	4b3f      	ldr	r3, [pc, #252]	@ (80018a8 <encoder_Inc_Dec+0x218>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b3d      	ldr	r3, [pc, #244]	@ (80018a8 <encoder_Inc_Dec+0x218>)
 80017b4:	801a      	strh	r2, [r3, #0]
 80017b6:	4b3c      	ldr	r3, [pc, #240]	@ (80018a8 <encoder_Inc_Dec+0x218>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <encoder_Inc_Dec+0x134>
					new_second = 59;
 80017be:	4b3a      	ldr	r3, [pc, #232]	@ (80018a8 <encoder_Inc_Dec+0x218>)
 80017c0:	223b      	movs	r2, #59	@ 0x3b
 80017c2:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	if (encoderValue != previousEncoderValue && ButtonCount == 1 && currentMode == MODE_HOUR_MIN) {
 80017c4:	4b32      	ldr	r3, [pc, #200]	@ (8001890 <encoder_Inc_Dec+0x200>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <encoder_Inc_Dec+0x204>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d045      	beq.n	800185c <encoder_Inc_Dec+0x1cc>
 80017d0:	4b31      	ldr	r3, [pc, #196]	@ (8001898 <encoder_Inc_Dec+0x208>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d141      	bne.n	800185c <encoder_Inc_Dec+0x1cc>
 80017d8:	4b30      	ldr	r3, [pc, #192]	@ (800189c <encoder_Inc_Dec+0x20c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d13d      	bne.n	800185c <encoder_Inc_Dec+0x1cc>
		if (encoderValue > previousEncoderValue) {
 80017e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001890 <encoder_Inc_Dec+0x200>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <encoder_Inc_Dec+0x204>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dd05      	ble.n	80017f8 <encoder_Inc_Dec+0x168>
			modeTimeCount++;
 80017ec:	4b2c      	ldr	r3, [pc, #176]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	3301      	adds	r3, #1
 80017f2:	4a2b      	ldr	r2, [pc, #172]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e004      	b.n	8001802 <encoder_Inc_Dec+0x172>
		} else {
			modeTimeCount--;
 80017f8:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4a28      	ldr	r2, [pc, #160]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 8001800:	6013      	str	r3, [r2, #0]
		}

		previousEncoderValue = encoderValue;
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <encoder_Inc_Dec+0x200>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a23      	ldr	r2, [pc, #140]	@ (8001894 <encoder_Inc_Dec+0x204>)
 8001808:	6013      	str	r3, [r2, #0]

		if (modeTimeCount >= 1) {
 800180a:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	dd10      	ble.n	8001834 <encoder_Inc_Dec+0x1a4>
			modeTimeCount = 0;
 8001812:	4b23      	ldr	r3, [pc, #140]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
			if (++new_hour > 23) {
 8001818:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <encoder_Inc_Dec+0x21c>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	b29a      	uxth	r2, r3
 8001820:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <encoder_Inc_Dec+0x21c>)
 8001822:	801a      	strh	r2, [r3, #0]
 8001824:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <encoder_Inc_Dec+0x21c>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	2b17      	cmp	r3, #23
 800182a:	d917      	bls.n	800185c <encoder_Inc_Dec+0x1cc>
				new_hour = 0;
 800182c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <encoder_Inc_Dec+0x21c>)
 800182e:	2200      	movs	r2, #0
 8001830:	801a      	strh	r2, [r3, #0]
 8001832:	e013      	b.n	800185c <encoder_Inc_Dec+0x1cc>
			}
		} else if (modeTimeCount <= -1) {
 8001834:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	da0f      	bge.n	800185c <encoder_Inc_Dec+0x1cc>
			modeTimeCount = 0;
 800183c:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
			if (--new_hour <= 0) {
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <encoder_Inc_Dec+0x21c>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	3b01      	subs	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <encoder_Inc_Dec+0x21c>)
 800184c:	801a      	strh	r2, [r3, #0]
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <encoder_Inc_Dec+0x21c>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <encoder_Inc_Dec+0x1cc>
				new_hour = 23;
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <encoder_Inc_Dec+0x21c>)
 8001858:	2217      	movs	r2, #23
 800185a:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	if (encoderValue != previousEncoderValue && ButtonCount == 2 && currentMode == MODE_HOUR_MIN) {
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <encoder_Inc_Dec+0x200>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <encoder_Inc_Dec+0x204>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d055      	beq.n	8001914 <encoder_Inc_Dec+0x284>
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <encoder_Inc_Dec+0x208>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d151      	bne.n	8001914 <encoder_Inc_Dec+0x284>
 8001870:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <encoder_Inc_Dec+0x20c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d14d      	bne.n	8001914 <encoder_Inc_Dec+0x284>
		if (encoderValue > previousEncoderValue) {
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <encoder_Inc_Dec+0x200>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <encoder_Inc_Dec+0x204>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	dd15      	ble.n	80018b0 <encoder_Inc_Dec+0x220>
			modeTimeCount++;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <encoder_Inc_Dec+0x210>)
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e014      	b.n	80018ba <encoder_Inc_Dec+0x22a>
 8001890:	200000e4 	.word	0x200000e4
 8001894:	200000e8 	.word	0x200000e8
 8001898:	200000ec 	.word	0x200000ec
 800189c:	200000d4 	.word	0x200000d4
 80018a0:	200000dc 	.word	0x200000dc
 80018a4:	200000fe 	.word	0x200000fe
 80018a8:	200000fc 	.word	0x200000fc
 80018ac:	20000100 	.word	0x20000100
		} else {
			modeTimeCount--;
 80018b0:	4b81      	ldr	r3, [pc, #516]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	4a80      	ldr	r2, [pc, #512]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 80018b8:	6013      	str	r3, [r2, #0]
		}

		previousEncoderValue = encoderValue;
 80018ba:	4b80      	ldr	r3, [pc, #512]	@ (8001abc <encoder_Inc_Dec+0x42c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a80      	ldr	r2, [pc, #512]	@ (8001ac0 <encoder_Inc_Dec+0x430>)
 80018c0:	6013      	str	r3, [r2, #0]

		if (modeTimeCount >= 1) {
 80018c2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dd10      	ble.n	80018ec <encoder_Inc_Dec+0x25c>
			modeTimeCount = 0;
 80018ca:	4b7b      	ldr	r3, [pc, #492]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
			if (++new_minute > 59) {
 80018d0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac4 <encoder_Inc_Dec+0x434>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4b7a      	ldr	r3, [pc, #488]	@ (8001ac4 <encoder_Inc_Dec+0x434>)
 80018da:	801a      	strh	r2, [r3, #0]
 80018dc:	4b79      	ldr	r3, [pc, #484]	@ (8001ac4 <encoder_Inc_Dec+0x434>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80018e2:	d917      	bls.n	8001914 <encoder_Inc_Dec+0x284>
				new_minute = 0;
 80018e4:	4b77      	ldr	r3, [pc, #476]	@ (8001ac4 <encoder_Inc_Dec+0x434>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	801a      	strh	r2, [r3, #0]
 80018ea:	e013      	b.n	8001914 <encoder_Inc_Dec+0x284>
			}
		} else if (modeTimeCount <= -1) {
 80018ec:	4b72      	ldr	r3, [pc, #456]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da0f      	bge.n	8001914 <encoder_Inc_Dec+0x284>
			modeTimeCount = 0;
 80018f4:	4b70      	ldr	r3, [pc, #448]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
			if (--new_minute <= 0) {
 80018fa:	4b72      	ldr	r3, [pc, #456]	@ (8001ac4 <encoder_Inc_Dec+0x434>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	4b70      	ldr	r3, [pc, #448]	@ (8001ac4 <encoder_Inc_Dec+0x434>)
 8001904:	801a      	strh	r2, [r3, #0]
 8001906:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac4 <encoder_Inc_Dec+0x434>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d102      	bne.n	8001914 <encoder_Inc_Dec+0x284>
				new_minute = 59;
 800190e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ac4 <encoder_Inc_Dec+0x434>)
 8001910:	223b      	movs	r2, #59	@ 0x3b
 8001912:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	if (encoderValue != previousEncoderValue && ButtonCount == 1 && currentMode == MODE_DAY_MON) {
 8001914:	4b69      	ldr	r3, [pc, #420]	@ (8001abc <encoder_Inc_Dec+0x42c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b69      	ldr	r3, [pc, #420]	@ (8001ac0 <encoder_Inc_Dec+0x430>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d045      	beq.n	80019ac <encoder_Inc_Dec+0x31c>
 8001920:	4b69      	ldr	r3, [pc, #420]	@ (8001ac8 <encoder_Inc_Dec+0x438>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d141      	bne.n	80019ac <encoder_Inc_Dec+0x31c>
 8001928:	4b68      	ldr	r3, [pc, #416]	@ (8001acc <encoder_Inc_Dec+0x43c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d13d      	bne.n	80019ac <encoder_Inc_Dec+0x31c>
			if (encoderValue > previousEncoderValue) {
 8001930:	4b62      	ldr	r3, [pc, #392]	@ (8001abc <encoder_Inc_Dec+0x42c>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b62      	ldr	r3, [pc, #392]	@ (8001ac0 <encoder_Inc_Dec+0x430>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	dd05      	ble.n	8001948 <encoder_Inc_Dec+0x2b8>
				modeTimeCount++;
 800193c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	4a5d      	ldr	r2, [pc, #372]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e004      	b.n	8001952 <encoder_Inc_Dec+0x2c2>
			} else {
				modeTimeCount--;
 8001948:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3b01      	subs	r3, #1
 800194e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 8001950:	6013      	str	r3, [r2, #0]
			}

			previousEncoderValue = encoderValue;
 8001952:	4b5a      	ldr	r3, [pc, #360]	@ (8001abc <encoder_Inc_Dec+0x42c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a5a      	ldr	r2, [pc, #360]	@ (8001ac0 <encoder_Inc_Dec+0x430>)
 8001958:	6013      	str	r3, [r2, #0]

			if (modeTimeCount >= 1) {
 800195a:	4b57      	ldr	r3, [pc, #348]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	dd10      	ble.n	8001984 <encoder_Inc_Dec+0x2f4>
				modeTimeCount = 0;
 8001962:	4b55      	ldr	r3, [pc, #340]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
				if (++new_day > 31) {
 8001968:	4b59      	ldr	r3, [pc, #356]	@ (8001ad0 <encoder_Inc_Dec+0x440>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b57      	ldr	r3, [pc, #348]	@ (8001ad0 <encoder_Inc_Dec+0x440>)
 8001972:	801a      	strh	r2, [r3, #0]
 8001974:	4b56      	ldr	r3, [pc, #344]	@ (8001ad0 <encoder_Inc_Dec+0x440>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	2b1f      	cmp	r3, #31
 800197a:	d917      	bls.n	80019ac <encoder_Inc_Dec+0x31c>
					new_day = 0;
 800197c:	4b54      	ldr	r3, [pc, #336]	@ (8001ad0 <encoder_Inc_Dec+0x440>)
 800197e:	2200      	movs	r2, #0
 8001980:	801a      	strh	r2, [r3, #0]
 8001982:	e013      	b.n	80019ac <encoder_Inc_Dec+0x31c>
				}
			} else if (modeTimeCount <= -1) {
 8001984:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	da0f      	bge.n	80019ac <encoder_Inc_Dec+0x31c>
				modeTimeCount = 0;
 800198c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
				if (--new_day <= 0) {
 8001992:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad0 <encoder_Inc_Dec+0x440>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	3b01      	subs	r3, #1
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad0 <encoder_Inc_Dec+0x440>)
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad0 <encoder_Inc_Dec+0x440>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <encoder_Inc_Dec+0x31c>
					new_day = 31;
 80019a6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad0 <encoder_Inc_Dec+0x440>)
 80019a8:	221f      	movs	r2, #31
 80019aa:	801a      	strh	r2, [r3, #0]
				}
			}
		}
		if (encoderValue != previousEncoderValue && ButtonCount == 2 && currentMode == MODE_DAY_MON) {
 80019ac:	4b43      	ldr	r3, [pc, #268]	@ (8001abc <encoder_Inc_Dec+0x42c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b43      	ldr	r3, [pc, #268]	@ (8001ac0 <encoder_Inc_Dec+0x430>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d045      	beq.n	8001a44 <encoder_Inc_Dec+0x3b4>
 80019b8:	4b43      	ldr	r3, [pc, #268]	@ (8001ac8 <encoder_Inc_Dec+0x438>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d141      	bne.n	8001a44 <encoder_Inc_Dec+0x3b4>
 80019c0:	4b42      	ldr	r3, [pc, #264]	@ (8001acc <encoder_Inc_Dec+0x43c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d13d      	bne.n	8001a44 <encoder_Inc_Dec+0x3b4>
			if (encoderValue > previousEncoderValue) {
 80019c8:	4b3c      	ldr	r3, [pc, #240]	@ (8001abc <encoder_Inc_Dec+0x42c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac0 <encoder_Inc_Dec+0x430>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dd05      	ble.n	80019e0 <encoder_Inc_Dec+0x350>
				modeTimeCount++;
 80019d4:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	4a37      	ldr	r2, [pc, #220]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e004      	b.n	80019ea <encoder_Inc_Dec+0x35a>
			} else {
				modeTimeCount--;
 80019e0:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	4a34      	ldr	r2, [pc, #208]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 80019e8:	6013      	str	r3, [r2, #0]
			}

			previousEncoderValue = encoderValue;
 80019ea:	4b34      	ldr	r3, [pc, #208]	@ (8001abc <encoder_Inc_Dec+0x42c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a34      	ldr	r2, [pc, #208]	@ (8001ac0 <encoder_Inc_Dec+0x430>)
 80019f0:	6013      	str	r3, [r2, #0]

			if (modeTimeCount >= 1) {
 80019f2:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	dd10      	ble.n	8001a1c <encoder_Inc_Dec+0x38c>
				modeTimeCount = 0;
 80019fa:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
				if (++new_month > 12) {
 8001a00:	4b34      	ldr	r3, [pc, #208]	@ (8001ad4 <encoder_Inc_Dec+0x444>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <encoder_Inc_Dec+0x444>)
 8001a0a:	801a      	strh	r2, [r3, #0]
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <encoder_Inc_Dec+0x444>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	2b0c      	cmp	r3, #12
 8001a12:	d917      	bls.n	8001a44 <encoder_Inc_Dec+0x3b4>
					new_month = 0;
 8001a14:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad4 <encoder_Inc_Dec+0x444>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	801a      	strh	r2, [r3, #0]
 8001a1a:	e013      	b.n	8001a44 <encoder_Inc_Dec+0x3b4>
				}
			} else if (modeTimeCount <= -1) {
 8001a1c:	4b26      	ldr	r3, [pc, #152]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	da0f      	bge.n	8001a44 <encoder_Inc_Dec+0x3b4>
				modeTimeCount = 0;
 8001a24:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
				if (--new_month <= 0) {
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <encoder_Inc_Dec+0x444>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	4b28      	ldr	r3, [pc, #160]	@ (8001ad4 <encoder_Inc_Dec+0x444>)
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <encoder_Inc_Dec+0x444>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <encoder_Inc_Dec+0x3b4>
					new_month = 12;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <encoder_Inc_Dec+0x444>)
 8001a40:	220c      	movs	r2, #12
 8001a42:	801a      	strh	r2, [r3, #0]
				}
			}
		}
		if (encoderValue != previousEncoderValue && ButtonCount == 1 && currentMode == MODE_YEAR) {
 8001a44:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <encoder_Inc_Dec+0x42c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <encoder_Inc_Dec+0x430>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d05b      	beq.n	8001b08 <encoder_Inc_Dec+0x478>
 8001a50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <encoder_Inc_Dec+0x438>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d157      	bne.n	8001b08 <encoder_Inc_Dec+0x478>
 8001a58:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <encoder_Inc_Dec+0x43c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d153      	bne.n	8001b08 <encoder_Inc_Dec+0x478>
			if (encoderValue > previousEncoderValue) {
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <encoder_Inc_Dec+0x42c>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <encoder_Inc_Dec+0x430>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dd05      	ble.n	8001a78 <encoder_Inc_Dec+0x3e8>
				modeTimeCount++;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	4a11      	ldr	r2, [pc, #68]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e004      	b.n	8001a82 <encoder_Inc_Dec+0x3f2>
			} else {
				modeTimeCount--;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 8001a80:	6013      	str	r3, [r2, #0]
			}

			previousEncoderValue = encoderValue;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <encoder_Inc_Dec+0x42c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac0 <encoder_Inc_Dec+0x430>)
 8001a88:	6013      	str	r3, [r2, #0]

			if (modeTimeCount >= 1) {
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	dd24      	ble.n	8001adc <encoder_Inc_Dec+0x44c>
				modeTimeCount = 0;
 8001a92:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <encoder_Inc_Dec+0x428>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
				if (++new_year > 9999) {
 8001a98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <encoder_Inc_Dec+0x448>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <encoder_Inc_Dec+0x448>)
 8001aa2:	801a      	strh	r2, [r3, #0]
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <encoder_Inc_Dec+0x448>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d92b      	bls.n	8001b08 <encoder_Inc_Dec+0x478>
					new_year = 0;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <encoder_Inc_Dec+0x448>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	e027      	b.n	8001b08 <encoder_Inc_Dec+0x478>
 8001ab8:	200000dc 	.word	0x200000dc
 8001abc:	200000e4 	.word	0x200000e4
 8001ac0:	200000e8 	.word	0x200000e8
 8001ac4:	200000fe 	.word	0x200000fe
 8001ac8:	200000ec 	.word	0x200000ec
 8001acc:	200000d4 	.word	0x200000d4
 8001ad0:	20000102 	.word	0x20000102
 8001ad4:	20000104 	.word	0x20000104
 8001ad8:	20000106 	.word	0x20000106
				}
			} else if (modeTimeCount <= -1) {
 8001adc:	4b58      	ldr	r3, [pc, #352]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	da11      	bge.n	8001b08 <encoder_Inc_Dec+0x478>
				modeTimeCount = 0;
 8001ae4:	4b56      	ldr	r3, [pc, #344]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
				if (--new_year <= 2024) {
 8001aea:	4b56      	ldr	r3, [pc, #344]	@ (8001c44 <encoder_Inc_Dec+0x5b4>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b54      	ldr	r3, [pc, #336]	@ (8001c44 <encoder_Inc_Dec+0x5b4>)
 8001af4:	801a      	strh	r2, [r3, #0]
 8001af6:	4b53      	ldr	r3, [pc, #332]	@ (8001c44 <encoder_Inc_Dec+0x5b4>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	f5b3 6ffd 	cmp.w	r3, #2024	@ 0x7e8
 8001afe:	d803      	bhi.n	8001b08 <encoder_Inc_Dec+0x478>
					new_year = 2024;
 8001b00:	4b50      	ldr	r3, [pc, #320]	@ (8001c44 <encoder_Inc_Dec+0x5b4>)
 8001b02:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 8001b06:	801a      	strh	r2, [r3, #0]
				}
			}
		}
		if (encoderValue != previousEncoderValue && ButtonCount == 1 && currentMode == MODE_ALARM) {
 8001b08:	4b4f      	ldr	r3, [pc, #316]	@ (8001c48 <encoder_Inc_Dec+0x5b8>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b4f      	ldr	r3, [pc, #316]	@ (8001c4c <encoder_Inc_Dec+0x5bc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d045      	beq.n	8001ba0 <encoder_Inc_Dec+0x510>
 8001b14:	4b4e      	ldr	r3, [pc, #312]	@ (8001c50 <encoder_Inc_Dec+0x5c0>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d141      	bne.n	8001ba0 <encoder_Inc_Dec+0x510>
 8001b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c54 <encoder_Inc_Dec+0x5c4>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	d13d      	bne.n	8001ba0 <encoder_Inc_Dec+0x510>
			if (encoderValue > previousEncoderValue) {
 8001b24:	4b48      	ldr	r3, [pc, #288]	@ (8001c48 <encoder_Inc_Dec+0x5b8>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b48      	ldr	r3, [pc, #288]	@ (8001c4c <encoder_Inc_Dec+0x5bc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	dd05      	ble.n	8001b3c <encoder_Inc_Dec+0x4ac>
				modeTimeCount++;
 8001b30:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a42      	ldr	r2, [pc, #264]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e004      	b.n	8001b46 <encoder_Inc_Dec+0x4b6>
			} else {
				modeTimeCount--;
 8001b3c:	4b40      	ldr	r3, [pc, #256]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	4a3f      	ldr	r2, [pc, #252]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001b44:	6013      	str	r3, [r2, #0]
			}

			previousEncoderValue = encoderValue;
 8001b46:	4b40      	ldr	r3, [pc, #256]	@ (8001c48 <encoder_Inc_Dec+0x5b8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a40      	ldr	r2, [pc, #256]	@ (8001c4c <encoder_Inc_Dec+0x5bc>)
 8001b4c:	6013      	str	r3, [r2, #0]

			if (modeTimeCount >= 1) {
 8001b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	dd10      	ble.n	8001b78 <encoder_Inc_Dec+0x4e8>
				modeTimeCount = 0;
 8001b56:	4b3a      	ldr	r3, [pc, #232]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
				if (++alarm_hour > 23) {
 8001b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c58 <encoder_Inc_Dec+0x5c8>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	4b3c      	ldr	r3, [pc, #240]	@ (8001c58 <encoder_Inc_Dec+0x5c8>)
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <encoder_Inc_Dec+0x5c8>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b17      	cmp	r3, #23
 8001b6e:	d917      	bls.n	8001ba0 <encoder_Inc_Dec+0x510>
					alarm_hour = 0;
 8001b70:	4b39      	ldr	r3, [pc, #228]	@ (8001c58 <encoder_Inc_Dec+0x5c8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e013      	b.n	8001ba0 <encoder_Inc_Dec+0x510>
				}
			} else if (modeTimeCount <= -1) {
 8001b78:	4b31      	ldr	r3, [pc, #196]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	da0f      	bge.n	8001ba0 <encoder_Inc_Dec+0x510>
				modeTimeCount = 0;
 8001b80:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
				if (--alarm_hour <= 0) {
 8001b86:	4b34      	ldr	r3, [pc, #208]	@ (8001c58 <encoder_Inc_Dec+0x5c8>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <encoder_Inc_Dec+0x5c8>)
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	4b31      	ldr	r3, [pc, #196]	@ (8001c58 <encoder_Inc_Dec+0x5c8>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <encoder_Inc_Dec+0x510>
					alarm_hour = 23;
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c58 <encoder_Inc_Dec+0x5c8>)
 8001b9c:	2217      	movs	r2, #23
 8001b9e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (encoderValue != previousEncoderValue && ButtonCount == 2 && currentMode == MODE_ALARM) {
 8001ba0:	4b29      	ldr	r3, [pc, #164]	@ (8001c48 <encoder_Inc_Dec+0x5b8>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b29      	ldr	r3, [pc, #164]	@ (8001c4c <encoder_Inc_Dec+0x5bc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d045      	beq.n	8001c38 <encoder_Inc_Dec+0x5a8>
 8001bac:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <encoder_Inc_Dec+0x5c0>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d141      	bne.n	8001c38 <encoder_Inc_Dec+0x5a8>
 8001bb4:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <encoder_Inc_Dec+0x5c4>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d13d      	bne.n	8001c38 <encoder_Inc_Dec+0x5a8>
			if (encoderValue > previousEncoderValue) {
 8001bbc:	4b22      	ldr	r3, [pc, #136]	@ (8001c48 <encoder_Inc_Dec+0x5b8>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b22      	ldr	r3, [pc, #136]	@ (8001c4c <encoder_Inc_Dec+0x5bc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dd05      	ble.n	8001bd4 <encoder_Inc_Dec+0x544>
				modeTimeCount++;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	4a1c      	ldr	r2, [pc, #112]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e004      	b.n	8001bde <encoder_Inc_Dec+0x54e>
			} else {
				modeTimeCount--;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	4a19      	ldr	r2, [pc, #100]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001bdc:	6013      	str	r3, [r2, #0]
			}

			previousEncoderValue = encoderValue;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <encoder_Inc_Dec+0x5b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <encoder_Inc_Dec+0x5bc>)
 8001be4:	6013      	str	r3, [r2, #0]

			if (modeTimeCount >= 1) {
 8001be6:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	dd10      	ble.n	8001c10 <encoder_Inc_Dec+0x580>
				modeTimeCount = 0;
 8001bee:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
				if (++alarm_minute > 59) {
 8001bf4:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <encoder_Inc_Dec+0x5cc>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <encoder_Inc_Dec+0x5cc>)
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <encoder_Inc_Dec+0x5cc>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c06:	d917      	bls.n	8001c38 <encoder_Inc_Dec+0x5a8>
					alarm_minute = 0;
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <encoder_Inc_Dec+0x5cc>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
				}
			}
		}


}
 8001c0e:	e013      	b.n	8001c38 <encoder_Inc_Dec+0x5a8>
			} else if (modeTimeCount <= -1) {
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da0f      	bge.n	8001c38 <encoder_Inc_Dec+0x5a8>
				modeTimeCount = 0;
 8001c18:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <encoder_Inc_Dec+0x5b0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
				if (--alarm_minute <= 0) {
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <encoder_Inc_Dec+0x5cc>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <encoder_Inc_Dec+0x5cc>)
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <encoder_Inc_Dec+0x5cc>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <encoder_Inc_Dec+0x5a8>
					alarm_minute = 59;
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <encoder_Inc_Dec+0x5cc>)
 8001c34:	223b      	movs	r2, #59	@ 0x3b
 8001c36:	701a      	strb	r2, [r3, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	200000dc 	.word	0x200000dc
 8001c44:	20000106 	.word	0x20000106
 8001c48:	200000e4 	.word	0x200000e4
 8001c4c:	200000e8 	.word	0x200000e8
 8001c50:	200000ec 	.word	0x200000ec
 8001c54:	200000d4 	.word	0x200000d4
 8001c58:	200000ee 	.word	0x200000ee
 8001c5c:	200000ef 	.word	0x200000ef

08001c60 <mode>:
void mode(float TEMP) {
 8001c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c62:	b08b      	sub	sp, #44	@ 0x2c
 8001c64:	af04      	add	r7, sp, #16
 8001c66:	6078      	str	r0, [r7, #4]

	encoderValue = read_encoder();
 8001c68:	f7ff fb8a 	bl	8001380 <read_encoder>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a99      	ldr	r2, [pc, #612]	@ (8001ed4 <mode+0x274>)
 8001c70:	6013      	str	r3, [r2, #0]

    second = rtcTime.seconds;
 8001c72:	4b99      	ldr	r3, [pc, #612]	@ (8001ed8 <mode+0x278>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b98      	ldr	r3, [pc, #608]	@ (8001edc <mode+0x27c>)
 8001c7a:	801a      	strh	r2, [r3, #0]
    minute = rtcTime.minutes;
 8001c7c:	4b96      	ldr	r3, [pc, #600]	@ (8001ed8 <mode+0x278>)
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b97      	ldr	r3, [pc, #604]	@ (8001ee0 <mode+0x280>)
 8001c84:	801a      	strh	r2, [r3, #0]
    hour  = rtcTime.hour;
 8001c86:	4b94      	ldr	r3, [pc, #592]	@ (8001ed8 <mode+0x278>)
 8001c88:	789b      	ldrb	r3, [r3, #2]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b95      	ldr	r3, [pc, #596]	@ (8001ee4 <mode+0x284>)
 8001c8e:	801a      	strh	r2, [r3, #0]
    dayw = rtcTime.dayofweek;
 8001c90:	4b91      	ldr	r3, [pc, #580]	@ (8001ed8 <mode+0x278>)
 8001c92:	78db      	ldrb	r3, [r3, #3]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b94      	ldr	r3, [pc, #592]	@ (8001ee8 <mode+0x288>)
 8001c98:	801a      	strh	r2, [r3, #0]
    day = rtcTime.dayofmonth;
 8001c9a:	4b8f      	ldr	r3, [pc, #572]	@ (8001ed8 <mode+0x278>)
 8001c9c:	791b      	ldrb	r3, [r3, #4]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b92      	ldr	r3, [pc, #584]	@ (8001eec <mode+0x28c>)
 8001ca2:	801a      	strh	r2, [r3, #0]
    month = rtcTime.month;
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ed8 <mode+0x278>)
 8001ca6:	795b      	ldrb	r3, [r3, #5]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b91      	ldr	r3, [pc, #580]	@ (8001ef0 <mode+0x290>)
 8001cac:	801a      	strh	r2, [r3, #0]
    year = rtcTime.year + 1952;
 8001cae:	4b8a      	ldr	r3, [pc, #552]	@ (8001ed8 <mode+0x278>)
 8001cb0:	799b      	ldrb	r3, [r3, #6]
 8001cb2:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	4b8e      	ldr	r3, [pc, #568]	@ (8001ef4 <mode+0x294>)
 8001cba:	801a      	strh	r2, [r3, #0]

    //button_change();

    if (encoderValue != previousEncoderValue && ButtonCount == 0) {
 8001cbc:	4b85      	ldr	r3, [pc, #532]	@ (8001ed4 <mode+0x274>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b8d      	ldr	r3, [pc, #564]	@ (8001ef8 <mode+0x298>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d052      	beq.n	8001d6e <mode+0x10e>
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	@ (8001efc <mode+0x29c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d14e      	bne.n	8001d6e <mode+0x10e>
        if (encoderValue > previousEncoderValue) {
 8001cd0:	4b80      	ldr	r3, [pc, #512]	@ (8001ed4 <mode+0x274>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b88      	ldr	r3, [pc, #544]	@ (8001ef8 <mode+0x298>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dd05      	ble.n	8001ce8 <mode+0x88>
            modeChangeCount++;
 8001cdc:	4b88      	ldr	r3, [pc, #544]	@ (8001f00 <mode+0x2a0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	4a87      	ldr	r2, [pc, #540]	@ (8001f00 <mode+0x2a0>)
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e004      	b.n	8001cf2 <mode+0x92>
        } else {
            modeChangeCount--;
 8001ce8:	4b85      	ldr	r3, [pc, #532]	@ (8001f00 <mode+0x2a0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	4a84      	ldr	r2, [pc, #528]	@ (8001f00 <mode+0x2a0>)
 8001cf0:	6013      	str	r3, [r2, #0]
        }

        previousEncoderValue = encoderValue;
 8001cf2:	4b78      	ldr	r3, [pc, #480]	@ (8001ed4 <mode+0x274>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a80      	ldr	r2, [pc, #512]	@ (8001ef8 <mode+0x298>)
 8001cf8:	6013      	str	r3, [r2, #0]

        if (modeChangeCount >= 3) {
 8001cfa:	4b81      	ldr	r3, [pc, #516]	@ (8001f00 <mode+0x2a0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	dd18      	ble.n	8001d34 <mode+0xd4>
            modeChangeCount = 0;
 8001d02:	4b7f      	ldr	r3, [pc, #508]	@ (8001f00 <mode+0x2a0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
            currentMode = (currentMode == MODE_ALARM) ? MODE_MIN_SEC : (ClockMode)(currentMode + 1);
 8001d08:	4b7e      	ldr	r3, [pc, #504]	@ (8001f04 <mode+0x2a4>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d004      	beq.n	8001d1a <mode+0xba>
 8001d10:	4b7c      	ldr	r3, [pc, #496]	@ (8001f04 <mode+0x2a4>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	e000      	b.n	8001d1c <mode+0xbc>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	4a79      	ldr	r2, [pc, #484]	@ (8001f04 <mode+0x2a4>)
 8001d1e:	7013      	strb	r3, [r2, #0]
            buzzer = true;
 8001d20:	4b79      	ldr	r3, [pc, #484]	@ (8001f08 <mode+0x2a8>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
            GPIOB->BSRR = GPIO_PIN_1;
 8001d26:	4b79      	ldr	r3, [pc, #484]	@ (8001f0c <mode+0x2ac>)
 8001d28:	2202      	movs	r2, #2
 8001d2a:	611a      	str	r2, [r3, #16]
            delay_counter = 0;
 8001d2c:	4b78      	ldr	r3, [pc, #480]	@ (8001f10 <mode+0x2b0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	e01c      	b.n	8001d6e <mode+0x10e>
        } else if (modeChangeCount <= -3) {
 8001d34:	4b72      	ldr	r3, [pc, #456]	@ (8001f00 <mode+0x2a0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f113 0f02 	cmn.w	r3, #2
 8001d3c:	da17      	bge.n	8001d6e <mode+0x10e>
            modeChangeCount = 0;
 8001d3e:	4b70      	ldr	r3, [pc, #448]	@ (8001f00 <mode+0x2a0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
            currentMode = (currentMode == MODE_MIN_SEC) ? MODE_ALARM : (ClockMode)(currentMode - 1);
 8001d44:	4b6f      	ldr	r3, [pc, #444]	@ (8001f04 <mode+0x2a4>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <mode+0xf6>
 8001d4c:	4b6d      	ldr	r3, [pc, #436]	@ (8001f04 <mode+0x2a4>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	e000      	b.n	8001d58 <mode+0xf8>
 8001d56:	2305      	movs	r3, #5
 8001d58:	4a6a      	ldr	r2, [pc, #424]	@ (8001f04 <mode+0x2a4>)
 8001d5a:	7013      	strb	r3, [r2, #0]
            buzzer = true;
 8001d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001f08 <mode+0x2a8>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
            GPIOB->BSRR = GPIO_PIN_1;
 8001d62:	4b6a      	ldr	r3, [pc, #424]	@ (8001f0c <mode+0x2ac>)
 8001d64:	2202      	movs	r2, #2
 8001d66:	611a      	str	r2, [r3, #16]
            delay_counter = 0;
 8001d68:	4b69      	ldr	r3, [pc, #420]	@ (8001f10 <mode+0x2b0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
        }
    }
    encoder_Inc_Dec();
 8001d6e:	f7ff fc8f 	bl	8001690 <encoder_Inc_Dec>
    if (buzzer) {
 8001d72:	4b65      	ldr	r3, [pc, #404]	@ (8001f08 <mode+0x2a8>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d010      	beq.n	8001d9c <mode+0x13c>
        delay_counter++;
 8001d7a:	4b65      	ldr	r3, [pc, #404]	@ (8001f10 <mode+0x2b0>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b63      	ldr	r3, [pc, #396]	@ (8001f10 <mode+0x2b0>)
 8001d84:	701a      	strb	r2, [r3, #0]
        if (delay_counter >= 5) {
 8001d86:	4b62      	ldr	r3, [pc, #392]	@ (8001f10 <mode+0x2b0>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d906      	bls.n	8001d9c <mode+0x13c>
            GPIOB->BSRR = GPIO_PIN_1 << 16;
 8001d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8001f0c <mode+0x2ac>)
 8001d90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d94:	611a      	str	r2, [r3, #16]
            buzzer = false;
 8001d96:	4b5c      	ldr	r3, [pc, #368]	@ (8001f08 <mode+0x2a8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
        }
    }

    switch(currentMode) {
 8001d9c:	4b59      	ldr	r3, [pc, #356]	@ (8001f04 <mode+0x2a4>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	f200 844f 	bhi.w	8002644 <mode+0x9e4>
 8001da6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dac <mode+0x14c>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001dc5 	.word	0x08001dc5
 8001db0:	08001f9f 	.word	0x08001f9f
 8001db4:	08002161 	.word	0x08002161
 8001db8:	080022eb 	.word	0x080022eb
 8001dbc:	080023ed 	.word	0x080023ed
 8001dc0:	0800245b 	.word	0x0800245b
        case MODE_MIN_SEC:
        	static bool previousButtonState_MS = false;
			bool currentButtonState_MS = GPIOA->IDR & GPIO_PIN_2;
 8001dc4:	4b53      	ldr	r3, [pc, #332]	@ (8001f14 <mode+0x2b4>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
			if(!currentButtonState_MS && previousButtonState_MS){
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	f083 0301 	eor.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d02d      	beq.n	8001e3e <mode+0x1de>
 8001de2:	4b4d      	ldr	r3, [pc, #308]	@ (8001f18 <mode+0x2b8>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d029      	beq.n	8001e3e <mode+0x1de>
				if(++ButtonCount >= 3){
 8001dea:	4b44      	ldr	r3, [pc, #272]	@ (8001efc <mode+0x29c>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b42      	ldr	r3, [pc, #264]	@ (8001efc <mode+0x29c>)
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	4b41      	ldr	r3, [pc, #260]	@ (8001efc <mode+0x29c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d902      	bls.n	8001e04 <mode+0x1a4>
					ButtonCount = 0;
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8001efc <mode+0x29c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
				}
				Set_Time(new_second, new_minute, hour, dayw, day, month, year);
 8001e04:	4b45      	ldr	r3, [pc, #276]	@ (8001f1c <mode+0x2bc>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b2d8      	uxtb	r0, r3
 8001e0a:	4b45      	ldr	r3, [pc, #276]	@ (8001f20 <mode+0x2c0>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	b2dc      	uxtb	r4, r3
 8001e10:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <mode+0x284>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b2dd      	uxtb	r5, r3
 8001e16:	4b34      	ldr	r3, [pc, #208]	@ (8001ee8 <mode+0x288>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b2de      	uxtb	r6, r3
 8001e1c:	4b33      	ldr	r3, [pc, #204]	@ (8001eec <mode+0x28c>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	4a33      	ldr	r2, [pc, #204]	@ (8001ef0 <mode+0x290>)
 8001e24:	8812      	ldrh	r2, [r2, #0]
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	4932      	ldr	r1, [pc, #200]	@ (8001ef4 <mode+0x294>)
 8001e2a:	8809      	ldrh	r1, [r1, #0]
 8001e2c:	b2c9      	uxtb	r1, r1
 8001e2e:	9102      	str	r1, [sp, #8]
 8001e30:	9201      	str	r2, [sp, #4]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	4633      	mov	r3, r6
 8001e36:	462a      	mov	r2, r5
 8001e38:	4621      	mov	r1, r4
 8001e3a:	f7ff f991 	bl	8001160 <Set_Time>
			}
			previousButtonState_MS = currentButtonState_MS;
 8001e3e:	4a36      	ldr	r2, [pc, #216]	@ (8001f18 <mode+0x2b8>)
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	7013      	strb	r3, [r2, #0]

            if (ButtonCount == 0) {
 8001e44:	4b2d      	ldr	r3, [pc, #180]	@ (8001efc <mode+0x29c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d16d      	bne.n	8001f28 <mode+0x2c8>
                GPIOA->BSRR = GPIO_PIN_3;
 8001e4c:	4b31      	ldr	r3, [pc, #196]	@ (8001f14 <mode+0x2b4>)
 8001e4e:	2208      	movs	r2, #8
 8001e50:	611a      	str	r2, [r3, #16]
                GPIOA->BSRR = GPIO_PIN_4 << 16;
 8001e52:	4b30      	ldr	r3, [pc, #192]	@ (8001f14 <mode+0x2b4>)
 8001e54:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e58:	611a      	str	r2, [r3, #16]

                clear();
 8001e5a:	f7fe ff25 	bl	8000ca8 <clear>
                setNumber(1, minute / 10);
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <mode+0x280>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	4a30      	ldr	r2, [pc, #192]	@ (8001f24 <mode+0x2c4>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	08db      	lsrs	r3, r3, #3
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f7fe ff3a 	bl	8000ce8 <setNumber>
                setNumber(2, minute % 10);
 8001e74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <mode+0x280>)
 8001e76:	881a      	ldrh	r2, [r3, #0]
 8001e78:	4b2a      	ldr	r3, [pc, #168]	@ (8001f24 <mode+0x2c4>)
 8001e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e7e:	08d9      	lsrs	r1, r3, #3
 8001e80:	460b      	mov	r3, r1
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f7fe ff2a 	bl	8000ce8 <setNumber>
                setNumber(3, second / 10);
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <mode+0x27c>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	4a22      	ldr	r2, [pc, #136]	@ (8001f24 <mode+0x2c4>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	08db      	lsrs	r3, r3, #3
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f7fe ff1f 	bl	8000ce8 <setNumber>
                setNumber(4, second % 10);
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <mode+0x27c>)
 8001eac:	881a      	ldrh	r2, [r3, #0]
 8001eae:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <mode+0x2c4>)
 8001eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8001eb4:	08d9      	lsrs	r1, r3, #3
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	2004      	movs	r0, #4
 8001ec6:	f7fe ff0f 	bl	8000ce8 <setNumber>
                show();
 8001eca:	f7fe ff9b 	bl	8000e04 <show>
                loop();
 8001ece:	f7fe ffbb 	bl	8000e48 <loop>
                setNumber(3, new_second / 10);
                setNumber(4, new_second % 10);
                show();
                loop();
            }
            break;
 8001ed2:	e3b8      	b.n	8002646 <mode+0x9e6>
 8001ed4:	200000e4 	.word	0x200000e4
 8001ed8:	2000002c 	.word	0x2000002c
 8001edc:	200000f0 	.word	0x200000f0
 8001ee0:	200000f2 	.word	0x200000f2
 8001ee4:	200000f4 	.word	0x200000f4
 8001ee8:	200000f6 	.word	0x200000f6
 8001eec:	200000f8 	.word	0x200000f8
 8001ef0:	200000fa 	.word	0x200000fa
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	200000e8 	.word	0x200000e8
 8001efc:	200000ec 	.word	0x200000ec
 8001f00:	200000d8 	.word	0x200000d8
 8001f04:	200000d4 	.word	0x200000d4
 8001f08:	200000d5 	.word	0x200000d5
 8001f0c:	40010c00 	.word	0x40010c00
 8001f10:	200000ed 	.word	0x200000ed
 8001f14:	40010800 	.word	0x40010800
 8001f18:	20000108 	.word	0x20000108
 8001f1c:	200000fc 	.word	0x200000fc
 8001f20:	200000fe 	.word	0x200000fe
 8001f24:	cccccccd 	.word	0xcccccccd
                setNumber(1, new_minute / 10);
 8001f28:	4b7f      	ldr	r3, [pc, #508]	@ (8002128 <mode+0x4c8>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	4a7f      	ldr	r2, [pc, #508]	@ (800212c <mode+0x4cc>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	08db      	lsrs	r3, r3, #3
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4619      	mov	r1, r3
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f7fe fed5 	bl	8000ce8 <setNumber>
                setNumber(2, new_minute % 10);
 8001f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8002128 <mode+0x4c8>)
 8001f40:	881a      	ldrh	r2, [r3, #0]
 8001f42:	4b7a      	ldr	r3, [pc, #488]	@ (800212c <mode+0x4cc>)
 8001f44:	fba3 1302 	umull	r1, r3, r3, r2
 8001f48:	08d9      	lsrs	r1, r3, #3
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4619      	mov	r1, r3
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f7fe fec5 	bl	8000ce8 <setNumber>
                setNumber(3, new_second / 10);
 8001f5e:	4b74      	ldr	r3, [pc, #464]	@ (8002130 <mode+0x4d0>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	4a72      	ldr	r2, [pc, #456]	@ (800212c <mode+0x4cc>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	2003      	movs	r0, #3
 8001f70:	f7fe feba 	bl	8000ce8 <setNumber>
                setNumber(4, new_second % 10);
 8001f74:	4b6e      	ldr	r3, [pc, #440]	@ (8002130 <mode+0x4d0>)
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	4b6c      	ldr	r3, [pc, #432]	@ (800212c <mode+0x4cc>)
 8001f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f7e:	08d9      	lsrs	r1, r3, #3
 8001f80:	460b      	mov	r3, r1
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	2004      	movs	r0, #4
 8001f90:	f7fe feaa 	bl	8000ce8 <setNumber>
                show();
 8001f94:	f7fe ff36 	bl	8000e04 <show>
                loop();
 8001f98:	f7fe ff56 	bl	8000e48 <loop>
            break;
 8001f9c:	e353      	b.n	8002646 <mode+0x9e6>
        case MODE_HOUR_MIN:
        	GPIOA->BSRR = GPIO_PIN_4 << 16;
 8001f9e:	4b65      	ldr	r3, [pc, #404]	@ (8002134 <mode+0x4d4>)
 8001fa0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001fa4:	611a      	str	r2, [r3, #16]
        	blink_led();
 8001fa6:	f7ff fb4d 	bl	8001644 <blink_led>
        	static bool previousButtonState_HM = false;
			bool currentButtonState_HM = GPIOA->IDR & GPIO_PIN_2;
 8001faa:	4b62      	ldr	r3, [pc, #392]	@ (8002134 <mode+0x4d4>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	743b      	strb	r3, [r7, #16]
			if(!currentButtonState_HM && previousButtonState_HM){
 8001fbc:	7c3b      	ldrb	r3, [r7, #16]
 8001fbe:	f083 0301 	eor.w	r3, r3, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d02d      	beq.n	8002024 <mode+0x3c4>
 8001fc8:	4b5b      	ldr	r3, [pc, #364]	@ (8002138 <mode+0x4d8>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d029      	beq.n	8002024 <mode+0x3c4>
				if(++ButtonCount >= 3){
 8001fd0:	4b5a      	ldr	r3, [pc, #360]	@ (800213c <mode+0x4dc>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b58      	ldr	r3, [pc, #352]	@ (800213c <mode+0x4dc>)
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	4b57      	ldr	r3, [pc, #348]	@ (800213c <mode+0x4dc>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d902      	bls.n	8001fea <mode+0x38a>
					ButtonCount = 0;
 8001fe4:	4b55      	ldr	r3, [pc, #340]	@ (800213c <mode+0x4dc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
				}
				Set_Time(second, new_minute, new_hour, dayw, day, month, year);
 8001fea:	4b55      	ldr	r3, [pc, #340]	@ (8002140 <mode+0x4e0>)
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b2d8      	uxtb	r0, r3
 8001ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8002128 <mode+0x4c8>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	b2dc      	uxtb	r4, r3
 8001ff6:	4b53      	ldr	r3, [pc, #332]	@ (8002144 <mode+0x4e4>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b2dd      	uxtb	r5, r3
 8001ffc:	4b52      	ldr	r3, [pc, #328]	@ (8002148 <mode+0x4e8>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	b2de      	uxtb	r6, r3
 8002002:	4b52      	ldr	r3, [pc, #328]	@ (800214c <mode+0x4ec>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4a51      	ldr	r2, [pc, #324]	@ (8002150 <mode+0x4f0>)
 800200a:	8812      	ldrh	r2, [r2, #0]
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	4951      	ldr	r1, [pc, #324]	@ (8002154 <mode+0x4f4>)
 8002010:	8809      	ldrh	r1, [r1, #0]
 8002012:	b2c9      	uxtb	r1, r1
 8002014:	9102      	str	r1, [sp, #8]
 8002016:	9201      	str	r2, [sp, #4]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	4633      	mov	r3, r6
 800201c:	462a      	mov	r2, r5
 800201e:	4621      	mov	r1, r4
 8002020:	f7ff f89e 	bl	8001160 <Set_Time>
			}
			previousButtonState_HM = currentButtonState_HM;
 8002024:	4a44      	ldr	r2, [pc, #272]	@ (8002138 <mode+0x4d8>)
 8002026:	7c3b      	ldrb	r3, [r7, #16]
 8002028:	7013      	strb	r3, [r2, #0]
			if (ButtonCount == 0) {
 800202a:	4b44      	ldr	r3, [pc, #272]	@ (800213c <mode+0x4dc>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d13c      	bne.n	80020ac <mode+0x44c>
				clear();
 8002032:	f7fe fe39 	bl	8000ca8 <clear>
				setNumber(1, hour / 10);
 8002036:	4b48      	ldr	r3, [pc, #288]	@ (8002158 <mode+0x4f8>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	4a3c      	ldr	r2, [pc, #240]	@ (800212c <mode+0x4cc>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	08db      	lsrs	r3, r3, #3
 8002042:	b29b      	uxth	r3, r3
 8002044:	4619      	mov	r1, r3
 8002046:	2001      	movs	r0, #1
 8002048:	f7fe fe4e 	bl	8000ce8 <setNumber>
				setNumber(2, hour % 10);
 800204c:	4b42      	ldr	r3, [pc, #264]	@ (8002158 <mode+0x4f8>)
 800204e:	881a      	ldrh	r2, [r3, #0]
 8002050:	4b36      	ldr	r3, [pc, #216]	@ (800212c <mode+0x4cc>)
 8002052:	fba3 1302 	umull	r1, r3, r3, r2
 8002056:	08d9      	lsrs	r1, r3, #3
 8002058:	460b      	mov	r3, r1
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	b29b      	uxth	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	2002      	movs	r0, #2
 8002068:	f7fe fe3e 	bl	8000ce8 <setNumber>
				setNumber(3, minute / 10);
 800206c:	4b3b      	ldr	r3, [pc, #236]	@ (800215c <mode+0x4fc>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	4a2e      	ldr	r2, [pc, #184]	@ (800212c <mode+0x4cc>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	08db      	lsrs	r3, r3, #3
 8002078:	b29b      	uxth	r3, r3
 800207a:	4619      	mov	r1, r3
 800207c:	2003      	movs	r0, #3
 800207e:	f7fe fe33 	bl	8000ce8 <setNumber>
				setNumber(4, minute % 10);
 8002082:	4b36      	ldr	r3, [pc, #216]	@ (800215c <mode+0x4fc>)
 8002084:	881a      	ldrh	r2, [r3, #0]
 8002086:	4b29      	ldr	r3, [pc, #164]	@ (800212c <mode+0x4cc>)
 8002088:	fba3 1302 	umull	r1, r3, r3, r2
 800208c:	08d9      	lsrs	r1, r3, #3
 800208e:	460b      	mov	r3, r1
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	b29b      	uxth	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	2004      	movs	r0, #4
 800209e:	f7fe fe23 	bl	8000ce8 <setNumber>
				show();
 80020a2:	f7fe feaf 	bl	8000e04 <show>
				loop();
 80020a6:	f7fe fecf 	bl	8000e48 <loop>
	            setNumber(3, new_minute / 10);
	            setNumber(4, new_minute % 10);
	            show();
	            loop();
			}
            break;
 80020aa:	e2cc      	b.n	8002646 <mode+0x9e6>
	            clear();
 80020ac:	f7fe fdfc 	bl	8000ca8 <clear>
	            setNumber(1, new_hour / 10);
 80020b0:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <mode+0x4e4>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	4a1d      	ldr	r2, [pc, #116]	@ (800212c <mode+0x4cc>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	08db      	lsrs	r3, r3, #3
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4619      	mov	r1, r3
 80020c0:	2001      	movs	r0, #1
 80020c2:	f7fe fe11 	bl	8000ce8 <setNumber>
	            setNumber(2, new_hour % 10);
 80020c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002144 <mode+0x4e4>)
 80020c8:	881a      	ldrh	r2, [r3, #0]
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <mode+0x4cc>)
 80020cc:	fba3 1302 	umull	r1, r3, r3, r2
 80020d0:	08d9      	lsrs	r1, r3, #3
 80020d2:	460b      	mov	r3, r1
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	2002      	movs	r0, #2
 80020e2:	f7fe fe01 	bl	8000ce8 <setNumber>
	            setNumber(3, new_minute / 10);
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <mode+0x4c8>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	4a10      	ldr	r2, [pc, #64]	@ (800212c <mode+0x4cc>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	4619      	mov	r1, r3
 80020f6:	2003      	movs	r0, #3
 80020f8:	f7fe fdf6 	bl	8000ce8 <setNumber>
	            setNumber(4, new_minute % 10);
 80020fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <mode+0x4c8>)
 80020fe:	881a      	ldrh	r2, [r3, #0]
 8002100:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <mode+0x4cc>)
 8002102:	fba3 1302 	umull	r1, r3, r3, r2
 8002106:	08d9      	lsrs	r1, r3, #3
 8002108:	460b      	mov	r3, r1
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	b29b      	uxth	r3, r3
 8002114:	4619      	mov	r1, r3
 8002116:	2004      	movs	r0, #4
 8002118:	f7fe fde6 	bl	8000ce8 <setNumber>
	            show();
 800211c:	f7fe fe72 	bl	8000e04 <show>
	            loop();
 8002120:	f7fe fe92 	bl	8000e48 <loop>
            break;
 8002124:	e28f      	b.n	8002646 <mode+0x9e6>
 8002126:	bf00      	nop
 8002128:	200000fe 	.word	0x200000fe
 800212c:	cccccccd 	.word	0xcccccccd
 8002130:	200000fc 	.word	0x200000fc
 8002134:	40010800 	.word	0x40010800
 8002138:	20000109 	.word	0x20000109
 800213c:	200000ec 	.word	0x200000ec
 8002140:	200000f0 	.word	0x200000f0
 8002144:	20000100 	.word	0x20000100
 8002148:	200000f6 	.word	0x200000f6
 800214c:	200000f8 	.word	0x200000f8
 8002150:	200000fa 	.word	0x200000fa
 8002154:	20000000 	.word	0x20000000
 8002158:	200000f4 	.word	0x200000f4
 800215c:	200000f2 	.word	0x200000f2
        case MODE_DAY_MON:
            GPIOA->BSRR = GPIO_PIN_3;
 8002160:	4b93      	ldr	r3, [pc, #588]	@ (80023b0 <mode+0x750>)
 8002162:	2208      	movs	r2, #8
 8002164:	611a      	str	r2, [r3, #16]
            GPIOA->BSRR = GPIO_PIN_4 << 16;
 8002166:	4b92      	ldr	r3, [pc, #584]	@ (80023b0 <mode+0x750>)
 8002168:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800216c:	611a      	str	r2, [r3, #16]
        	static bool previousButtonState_DM = false;
			bool currentButtonState_DM = GPIOA->IDR & GPIO_PIN_2;
 800216e:	4b90      	ldr	r3, [pc, #576]	@ (80023b0 <mode+0x750>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf14      	ite	ne
 800217a:	2301      	movne	r3, #1
 800217c:	2300      	moveq	r3, #0
 800217e:	747b      	strb	r3, [r7, #17]
			if(!currentButtonState_DM && previousButtonState_DM){
 8002180:	7c7b      	ldrb	r3, [r7, #17]
 8002182:	f083 0301 	eor.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d02d      	beq.n	80021e8 <mode+0x588>
 800218c:	4b89      	ldr	r3, [pc, #548]	@ (80023b4 <mode+0x754>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d029      	beq.n	80021e8 <mode+0x588>
				if(++ButtonCount >= 3){
 8002194:	4b88      	ldr	r3, [pc, #544]	@ (80023b8 <mode+0x758>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b86      	ldr	r3, [pc, #536]	@ (80023b8 <mode+0x758>)
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	4b85      	ldr	r3, [pc, #532]	@ (80023b8 <mode+0x758>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d902      	bls.n	80021ae <mode+0x54e>
					ButtonCount = 0;
 80021a8:	4b83      	ldr	r3, [pc, #524]	@ (80023b8 <mode+0x758>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
				}
				Set_Time(second, minute, hour, dayw, new_day, new_month, year);
 80021ae:	4b83      	ldr	r3, [pc, #524]	@ (80023bc <mode+0x75c>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b2d8      	uxtb	r0, r3
 80021b4:	4b82      	ldr	r3, [pc, #520]	@ (80023c0 <mode+0x760>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b2dc      	uxtb	r4, r3
 80021ba:	4b82      	ldr	r3, [pc, #520]	@ (80023c4 <mode+0x764>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b2dd      	uxtb	r5, r3
 80021c0:	4b81      	ldr	r3, [pc, #516]	@ (80023c8 <mode+0x768>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b2de      	uxtb	r6, r3
 80021c6:	4b81      	ldr	r3, [pc, #516]	@ (80023cc <mode+0x76c>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	4a80      	ldr	r2, [pc, #512]	@ (80023d0 <mode+0x770>)
 80021ce:	8812      	ldrh	r2, [r2, #0]
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	4980      	ldr	r1, [pc, #512]	@ (80023d4 <mode+0x774>)
 80021d4:	8809      	ldrh	r1, [r1, #0]
 80021d6:	b2c9      	uxtb	r1, r1
 80021d8:	9102      	str	r1, [sp, #8]
 80021da:	9201      	str	r2, [sp, #4]
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4633      	mov	r3, r6
 80021e0:	462a      	mov	r2, r5
 80021e2:	4621      	mov	r1, r4
 80021e4:	f7fe ffbc 	bl	8001160 <Set_Time>
			}
			previousButtonState_DM = currentButtonState_DM;
 80021e8:	4a72      	ldr	r2, [pc, #456]	@ (80023b4 <mode+0x754>)
 80021ea:	7c7b      	ldrb	r3, [r7, #17]
 80021ec:	7013      	strb	r3, [r2, #0]
            if (ButtonCount == 0) {
 80021ee:	4b72      	ldr	r3, [pc, #456]	@ (80023b8 <mode+0x758>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d13c      	bne.n	8002270 <mode+0x610>
				clear();
 80021f6:	f7fe fd57 	bl	8000ca8 <clear>
				setNumber(1, day / 10);
 80021fa:	4b77      	ldr	r3, [pc, #476]	@ (80023d8 <mode+0x778>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	4a77      	ldr	r2, [pc, #476]	@ (80023dc <mode+0x77c>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	08db      	lsrs	r3, r3, #3
 8002206:	b29b      	uxth	r3, r3
 8002208:	4619      	mov	r1, r3
 800220a:	2001      	movs	r0, #1
 800220c:	f7fe fd6c 	bl	8000ce8 <setNumber>
				setNumber(2, day % 10);
 8002210:	4b71      	ldr	r3, [pc, #452]	@ (80023d8 <mode+0x778>)
 8002212:	881a      	ldrh	r2, [r3, #0]
 8002214:	4b71      	ldr	r3, [pc, #452]	@ (80023dc <mode+0x77c>)
 8002216:	fba3 1302 	umull	r1, r3, r3, r2
 800221a:	08d9      	lsrs	r1, r3, #3
 800221c:	460b      	mov	r3, r1
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	b29b      	uxth	r3, r3
 8002228:	4619      	mov	r1, r3
 800222a:	2002      	movs	r0, #2
 800222c:	f7fe fd5c 	bl	8000ce8 <setNumber>
				setNumber(3, month / 10);
 8002230:	4b6b      	ldr	r3, [pc, #428]	@ (80023e0 <mode+0x780>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	4a69      	ldr	r2, [pc, #420]	@ (80023dc <mode+0x77c>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	08db      	lsrs	r3, r3, #3
 800223c:	b29b      	uxth	r3, r3
 800223e:	4619      	mov	r1, r3
 8002240:	2003      	movs	r0, #3
 8002242:	f7fe fd51 	bl	8000ce8 <setNumber>
				setNumber(4, month % 10);
 8002246:	4b66      	ldr	r3, [pc, #408]	@ (80023e0 <mode+0x780>)
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	4b64      	ldr	r3, [pc, #400]	@ (80023dc <mode+0x77c>)
 800224c:	fba3 1302 	umull	r1, r3, r3, r2
 8002250:	08d9      	lsrs	r1, r3, #3
 8002252:	460b      	mov	r3, r1
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	b29b      	uxth	r3, r3
 800225e:	4619      	mov	r1, r3
 8002260:	2004      	movs	r0, #4
 8002262:	f7fe fd41 	bl	8000ce8 <setNumber>
				show();
 8002266:	f7fe fdcd 	bl	8000e04 <show>
				loop();
 800226a:	f7fe fded 	bl	8000e48 <loop>
                setNumber(4, new_month % 10);
                show();
                loop();
            }

            break;
 800226e:	e1ea      	b.n	8002646 <mode+0x9e6>
                clear();
 8002270:	f7fe fd1a 	bl	8000ca8 <clear>
                setNumber(1, new_day / 10);
 8002274:	4b55      	ldr	r3, [pc, #340]	@ (80023cc <mode+0x76c>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	4a58      	ldr	r2, [pc, #352]	@ (80023dc <mode+0x77c>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	08db      	lsrs	r3, r3, #3
 8002280:	b29b      	uxth	r3, r3
 8002282:	4619      	mov	r1, r3
 8002284:	2001      	movs	r0, #1
 8002286:	f7fe fd2f 	bl	8000ce8 <setNumber>
                setNumber(2, new_day % 10);
 800228a:	4b50      	ldr	r3, [pc, #320]	@ (80023cc <mode+0x76c>)
 800228c:	881a      	ldrh	r2, [r3, #0]
 800228e:	4b53      	ldr	r3, [pc, #332]	@ (80023dc <mode+0x77c>)
 8002290:	fba3 1302 	umull	r1, r3, r3, r2
 8002294:	08d9      	lsrs	r1, r3, #3
 8002296:	460b      	mov	r3, r1
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	4619      	mov	r1, r3
 80022a4:	2002      	movs	r0, #2
 80022a6:	f7fe fd1f 	bl	8000ce8 <setNumber>
                setNumber(3, new_month / 10);
 80022aa:	4b49      	ldr	r3, [pc, #292]	@ (80023d0 <mode+0x770>)
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	4a4b      	ldr	r2, [pc, #300]	@ (80023dc <mode+0x77c>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	4619      	mov	r1, r3
 80022ba:	2003      	movs	r0, #3
 80022bc:	f7fe fd14 	bl	8000ce8 <setNumber>
                setNumber(4, new_month % 10);
 80022c0:	4b43      	ldr	r3, [pc, #268]	@ (80023d0 <mode+0x770>)
 80022c2:	881a      	ldrh	r2, [r3, #0]
 80022c4:	4b45      	ldr	r3, [pc, #276]	@ (80023dc <mode+0x77c>)
 80022c6:	fba3 1302 	umull	r1, r3, r3, r2
 80022ca:	08d9      	lsrs	r1, r3, #3
 80022cc:	460b      	mov	r3, r1
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	2004      	movs	r0, #4
 80022dc:	f7fe fd04 	bl	8000ce8 <setNumber>
                show();
 80022e0:	f7fe fd90 	bl	8000e04 <show>
                loop();
 80022e4:	f7fe fdb0 	bl	8000e48 <loop>
            break;
 80022e8:	e1ad      	b.n	8002646 <mode+0x9e6>
        case MODE_YEAR:
            GPIOA->BSRR = GPIO_PIN_3 << 16;
 80022ea:	4b31      	ldr	r3, [pc, #196]	@ (80023b0 <mode+0x750>)
 80022ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022f0:	611a      	str	r2, [r3, #16]
            GPIOA->BSRR = GPIO_PIN_4 << 16;
 80022f2:	4b2f      	ldr	r3, [pc, #188]	@ (80023b0 <mode+0x750>)
 80022f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80022f8:	611a      	str	r2, [r3, #16]
            static bool previousButtonState_Y = false;
			bool currentButtonState_Y = GPIOA->IDR & GPIO_PIN_2;
 80022fa:	4b2d      	ldr	r3, [pc, #180]	@ (80023b0 <mode+0x750>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	74bb      	strb	r3, [r7, #18]
			if(!currentButtonState_Y && previousButtonState_Y){
 800230c:	7cbb      	ldrb	r3, [r7, #18]
 800230e:	f083 0301 	eor.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d02d      	beq.n	8002374 <mode+0x714>
 8002318:	4b32      	ldr	r3, [pc, #200]	@ (80023e4 <mode+0x784>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d029      	beq.n	8002374 <mode+0x714>
				if(++ButtonCount >= 2){
 8002320:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <mode+0x758>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	b2da      	uxtb	r2, r3
 8002328:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <mode+0x758>)
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <mode+0x758>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d902      	bls.n	800233a <mode+0x6da>
					ButtonCount = 0;
 8002334:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <mode+0x758>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
				}
				Set_Time(second, minute, hour, dayw, day, month, new_year);
 800233a:	4b20      	ldr	r3, [pc, #128]	@ (80023bc <mode+0x75c>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b2d8      	uxtb	r0, r3
 8002340:	4b1f      	ldr	r3, [pc, #124]	@ (80023c0 <mode+0x760>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b2dc      	uxtb	r4, r3
 8002346:	4b1f      	ldr	r3, [pc, #124]	@ (80023c4 <mode+0x764>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b2dd      	uxtb	r5, r3
 800234c:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <mode+0x768>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	b2de      	uxtb	r6, r3
 8002352:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <mode+0x778>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	4a21      	ldr	r2, [pc, #132]	@ (80023e0 <mode+0x780>)
 800235a:	8812      	ldrh	r2, [r2, #0]
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	4922      	ldr	r1, [pc, #136]	@ (80023e8 <mode+0x788>)
 8002360:	8809      	ldrh	r1, [r1, #0]
 8002362:	b2c9      	uxtb	r1, r1
 8002364:	9102      	str	r1, [sp, #8]
 8002366:	9201      	str	r2, [sp, #4]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	4633      	mov	r3, r6
 800236c:	462a      	mov	r2, r5
 800236e:	4621      	mov	r1, r4
 8002370:	f7fe fef6 	bl	8001160 <Set_Time>
			}
			previousButtonState_Y = currentButtonState_Y;
 8002374:	4a1b      	ldr	r2, [pc, #108]	@ (80023e4 <mode+0x784>)
 8002376:	7cbb      	ldrb	r3, [r7, #18]
 8002378:	7013      	strb	r3, [r2, #0]
            if (ButtonCount == 0) {
 800237a:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <mode+0x758>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10a      	bne.n	8002398 <mode+0x738>
				printInt(year, true);
 8002382:	4b14      	ldr	r3, [pc, #80]	@ (80023d4 <mode+0x774>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	2101      	movs	r1, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fe99 	bl	80010c0 <printInt>
				show();
 800238e:	f7fe fd39 	bl	8000e04 <show>
				loop();
 8002392:	f7fe fd59 	bl	8000e48 <loop>
            } else {
                printInt(new_year, true);
                show();
                loop();
            }
            break;
 8002396:	e156      	b.n	8002646 <mode+0x9e6>
                printInt(new_year, true);
 8002398:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <mode+0x788>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	2101      	movs	r1, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fe8e 	bl	80010c0 <printInt>
                show();
 80023a4:	f7fe fd2e 	bl	8000e04 <show>
                loop();
 80023a8:	f7fe fd4e 	bl	8000e48 <loop>
            break;
 80023ac:	e14b      	b.n	8002646 <mode+0x9e6>
 80023ae:	bf00      	nop
 80023b0:	40010800 	.word	0x40010800
 80023b4:	2000010a 	.word	0x2000010a
 80023b8:	200000ec 	.word	0x200000ec
 80023bc:	200000f0 	.word	0x200000f0
 80023c0:	200000f2 	.word	0x200000f2
 80023c4:	200000f4 	.word	0x200000f4
 80023c8:	200000f6 	.word	0x200000f6
 80023cc:	20000102 	.word	0x20000102
 80023d0:	20000104 	.word	0x20000104
 80023d4:	20000000 	.word	0x20000000
 80023d8:	200000f8 	.word	0x200000f8
 80023dc:	cccccccd 	.word	0xcccccccd
 80023e0:	200000fa 	.word	0x200000fa
 80023e4:	2000010b 	.word	0x2000010b
 80023e8:	20000106 	.word	0x20000106
        case MODE_TEMP:
            GPIOA->BSRR = GPIO_PIN_3 << 16;
 80023ec:	4b98      	ldr	r3, [pc, #608]	@ (8002650 <mode+0x9f0>)
 80023ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023f2:	611a      	str	r2, [r3, #16]
            GPIOA->BSRR = GPIO_PIN_4 << 16;
 80023f4:	4b96      	ldr	r3, [pc, #600]	@ (8002650 <mode+0x9f0>)
 80023f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80023fa:	611a      	str	r2, [r3, #16]
            clear();
 80023fc:	f7fe fc54 	bl	8000ca8 <clear>
            setNumber(1, TEMP / 10);
 8002400:	4994      	ldr	r1, [pc, #592]	@ (8002654 <mode+0x9f4>)
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe fb74 	bl	8000af0 <__aeabi_fdiv>
 8002408:	4603      	mov	r3, r0
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fc0c 	bl	8000c28 <__aeabi_f2iz>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	2001      	movs	r0, #1
 8002416:	f7fe fc67 	bl	8000ce8 <setNumber>
            setNumber(2, (int)TEMP % 10);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fc04 	bl	8000c28 <__aeabi_f2iz>
 8002420:	4601      	mov	r1, r0
 8002422:	4b8d      	ldr	r3, [pc, #564]	@ (8002658 <mode+0x9f8>)
 8002424:	fb83 2301 	smull	r2, r3, r3, r1
 8002428:	109a      	asrs	r2, r3, #2
 800242a:	17cb      	asrs	r3, r1, #31
 800242c:	1ad2      	subs	r2, r2, r3
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	1aca      	subs	r2, r1, r3
 8002438:	4611      	mov	r1, r2
 800243a:	2002      	movs	r0, #2
 800243c:	f7fe fc54 	bl	8000ce8 <setNumber>
            setChar(3, __DEGREE);
 8002440:	2105      	movs	r1, #5
 8002442:	2003      	movs	r0, #3
 8002444:	f7fe fc78 	bl	8000d38 <setChar>
            setChar(4, __C);
 8002448:	2102      	movs	r1, #2
 800244a:	2004      	movs	r0, #4
 800244c:	f7fe fc74 	bl	8000d38 <setChar>
            show();
 8002450:	f7fe fcd8 	bl	8000e04 <show>
            loop();
 8002454:	f7fe fcf8 	bl	8000e48 <loop>
            break;
 8002458:	e0f5      	b.n	8002646 <mode+0x9e6>
        case MODE_ALARM:
			if(alarm_hour == rtcTime.hour && alarm_minute == rtcTime.minutes && alarm_hour != 0 && setup_alarm){
 800245a:	4b80      	ldr	r3, [pc, #512]	@ (800265c <mode+0x9fc>)
 800245c:	789a      	ldrb	r2, [r3, #2]
 800245e:	4b80      	ldr	r3, [pc, #512]	@ (8002660 <mode+0xa00>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d143      	bne.n	80024ee <mode+0x88e>
 8002466:	4b7d      	ldr	r3, [pc, #500]	@ (800265c <mode+0x9fc>)
 8002468:	785a      	ldrb	r2, [r3, #1]
 800246a:	4b7e      	ldr	r3, [pc, #504]	@ (8002664 <mode+0xa04>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d13d      	bne.n	80024ee <mode+0x88e>
 8002472:	4b7b      	ldr	r3, [pc, #492]	@ (8002660 <mode+0xa00>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d039      	beq.n	80024ee <mode+0x88e>
 800247a:	4b7b      	ldr	r3, [pc, #492]	@ (8002668 <mode+0xa08>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d035      	beq.n	80024ee <mode+0x88e>
				int currentSecond = second;
 8002482:	4b7a      	ldr	r3, [pc, #488]	@ (800266c <mode+0xa0c>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	617b      	str	r3, [r7, #20]
					if (currentSecond != previousSecond) {
 8002488:	4b79      	ldr	r3, [pc, #484]	@ (8002670 <mode+0xa10>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	429a      	cmp	r2, r3
 8002490:	d016      	beq.n	80024c0 <mode+0x860>
						previousSecond = currentSecond;
 8002492:	4a77      	ldr	r2, [pc, #476]	@ (8002670 <mode+0xa10>)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	6013      	str	r3, [r2, #0]
						if (currentSecond % 2 == 0) {
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <mode+0x850>
							GPIOA->BSRR = GPIO_PIN_4;
 80024a2:	4b6b      	ldr	r3, [pc, #428]	@ (8002650 <mode+0x9f0>)
 80024a4:	2210      	movs	r2, #16
 80024a6:	611a      	str	r2, [r3, #16]
							GPIOB->BSRR = GPIO_PIN_1;
 80024a8:	4b72      	ldr	r3, [pc, #456]	@ (8002674 <mode+0xa14>)
 80024aa:	2202      	movs	r2, #2
 80024ac:	611a      	str	r2, [r3, #16]
 80024ae:	e007      	b.n	80024c0 <mode+0x860>
						} else {
							GPIOA->BSRR = GPIO_PIN_4 << 16;
 80024b0:	4b67      	ldr	r3, [pc, #412]	@ (8002650 <mode+0x9f0>)
 80024b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80024b6:	611a      	str	r2, [r3, #16]
							GPIOB->BSRR = GPIO_PIN_1 << 16;
 80024b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002674 <mode+0xa14>)
 80024ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024be:	611a      	str	r2, [r3, #16]
						}
					}
				if(!(GPIOA->IDR & GPIO_PIN_2)){
 80024c0:	4b63      	ldr	r3, [pc, #396]	@ (8002650 <mode+0x9f0>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d13a      	bne.n	8002542 <mode+0x8e2>

					alarm_hour = 0;
 80024cc:	4b64      	ldr	r3, [pc, #400]	@ (8002660 <mode+0xa00>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
					alarm_minute = 0;
 80024d2:	4b64      	ldr	r3, [pc, #400]	@ (8002664 <mode+0xa04>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
					setup_alarm = false;
 80024d8:	4b63      	ldr	r3, [pc, #396]	@ (8002668 <mode+0xa08>)
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
					GPIOB->BSRR = GPIO_PIN_1 << 16;
 80024de:	4b65      	ldr	r3, [pc, #404]	@ (8002674 <mode+0xa14>)
 80024e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024e4:	611a      	str	r2, [r3, #16]
					ButtonCount = 3;
 80024e6:	4b64      	ldr	r3, [pc, #400]	@ (8002678 <mode+0xa18>)
 80024e8:	2203      	movs	r2, #3
 80024ea:	701a      	strb	r2, [r3, #0]
			if(alarm_hour == rtcTime.hour && alarm_minute == rtcTime.minutes && alarm_hour != 0 && setup_alarm){
 80024ec:	e029      	b.n	8002542 <mode+0x8e2>

				}
			} else {
				GPIOA->BSRR = GPIO_PIN_4;
 80024ee:	4b58      	ldr	r3, [pc, #352]	@ (8002650 <mode+0x9f0>)
 80024f0:	2210      	movs	r2, #16
 80024f2:	611a      	str	r2, [r3, #16]
				static bool previousButtonState_AL = false;
				bool currentButtonState_AL = GPIOA->IDR & GPIO_PIN_2;
 80024f4:	4b56      	ldr	r3, [pc, #344]	@ (8002650 <mode+0x9f0>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	74fb      	strb	r3, [r7, #19]
				if(!currentButtonState_AL && previousButtonState_AL){
 8002506:	7cfb      	ldrb	r3, [r7, #19]
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d013      	beq.n	800253a <mode+0x8da>
 8002512:	4b5a      	ldr	r3, [pc, #360]	@ (800267c <mode+0xa1c>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00f      	beq.n	800253a <mode+0x8da>
					if(++ButtonCount >= 3){
 800251a:	4b57      	ldr	r3, [pc, #348]	@ (8002678 <mode+0xa18>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	3301      	adds	r3, #1
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b55      	ldr	r3, [pc, #340]	@ (8002678 <mode+0xa18>)
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	4b54      	ldr	r3, [pc, #336]	@ (8002678 <mode+0xa18>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d905      	bls.n	800253a <mode+0x8da>
						ButtonCount = 0;
 800252e:	4b52      	ldr	r3, [pc, #328]	@ (8002678 <mode+0xa18>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
						setup_alarm = true;
 8002534:	4b4c      	ldr	r3, [pc, #304]	@ (8002668 <mode+0xa08>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
					}
				}
				previousButtonState_AL = currentButtonState_AL;
 800253a:	4a50      	ldr	r2, [pc, #320]	@ (800267c <mode+0xa1c>)
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	7013      	strb	r3, [r2, #0]
 8002540:	e000      	b.n	8002544 <mode+0x8e4>
			if(alarm_hour == rtcTime.hour && alarm_minute == rtcTime.minutes && alarm_hour != 0 && setup_alarm){
 8002542:	bf00      	nop
			}
			if (ButtonCount == 0) {
 8002544:	4b4c      	ldr	r3, [pc, #304]	@ (8002678 <mode+0xa18>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d13e      	bne.n	80025ca <mode+0x96a>

				clear();
 800254c:	f7fe fbac 	bl	8000ca8 <clear>
				blink_led();
 8002550:	f7ff f878 	bl	8001644 <blink_led>
				setNumber(1, alarm_hour / 10);
 8002554:	4b42      	ldr	r3, [pc, #264]	@ (8002660 <mode+0xa00>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4a49      	ldr	r2, [pc, #292]	@ (8002680 <mode+0xa20>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	08db      	lsrs	r3, r3, #3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4619      	mov	r1, r3
 8002564:	2001      	movs	r0, #1
 8002566:	f7fe fbbf 	bl	8000ce8 <setNumber>
				setNumber(2, alarm_hour % 10);
 800256a:	4b3d      	ldr	r3, [pc, #244]	@ (8002660 <mode+0xa00>)
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	4b44      	ldr	r3, [pc, #272]	@ (8002680 <mode+0xa20>)
 8002570:	fba3 1302 	umull	r1, r3, r3, r2
 8002574:	08d9      	lsrs	r1, r3, #3
 8002576:	460b      	mov	r3, r1
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4619      	mov	r1, r3
 8002584:	2002      	movs	r0, #2
 8002586:	f7fe fbaf 	bl	8000ce8 <setNumber>
				setNumber(3, alarm_minute / 10);
 800258a:	4b36      	ldr	r3, [pc, #216]	@ (8002664 <mode+0xa04>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4a3c      	ldr	r2, [pc, #240]	@ (8002680 <mode+0xa20>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	08db      	lsrs	r3, r3, #3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4619      	mov	r1, r3
 800259a:	2003      	movs	r0, #3
 800259c:	f7fe fba4 	bl	8000ce8 <setNumber>
				setNumber(4, alarm_minute % 10);
 80025a0:	4b30      	ldr	r3, [pc, #192]	@ (8002664 <mode+0xa04>)
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	4b36      	ldr	r3, [pc, #216]	@ (8002680 <mode+0xa20>)
 80025a6:	fba3 1302 	umull	r1, r3, r3, r2
 80025aa:	08d9      	lsrs	r1, r3, #3
 80025ac:	460b      	mov	r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	4619      	mov	r1, r3
 80025ba:	2004      	movs	r0, #4
 80025bc:	f7fe fb94 	bl	8000ce8 <setNumber>
				show();
 80025c0:	f7fe fc20 	bl	8000e04 <show>
				loop();
 80025c4:	f7fe fc40 	bl	8000e48 <loop>
				setNumber(3, alarm_minute / 10);
				setNumber(4, alarm_minute % 10);
				show();
				loop();
			}
            break;
 80025c8:	e03d      	b.n	8002646 <mode+0x9e6>
				clear();
 80025ca:	f7fe fb6d 	bl	8000ca8 <clear>
				setNumber(1, alarm_hour / 10);
 80025ce:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <mode+0xa00>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002680 <mode+0xa20>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	08db      	lsrs	r3, r3, #3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	4619      	mov	r1, r3
 80025de:	2001      	movs	r0, #1
 80025e0:	f7fe fb82 	bl	8000ce8 <setNumber>
				setNumber(2, alarm_hour % 10);
 80025e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002660 <mode+0xa00>)
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	4b25      	ldr	r3, [pc, #148]	@ (8002680 <mode+0xa20>)
 80025ea:	fba3 1302 	umull	r1, r3, r3, r2
 80025ee:	08d9      	lsrs	r1, r3, #3
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	4619      	mov	r1, r3
 80025fe:	2002      	movs	r0, #2
 8002600:	f7fe fb72 	bl	8000ce8 <setNumber>
				setNumber(3, alarm_minute / 10);
 8002604:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <mode+0xa04>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4a1d      	ldr	r2, [pc, #116]	@ (8002680 <mode+0xa20>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	08db      	lsrs	r3, r3, #3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4619      	mov	r1, r3
 8002614:	2003      	movs	r0, #3
 8002616:	f7fe fb67 	bl	8000ce8 <setNumber>
				setNumber(4, alarm_minute % 10);
 800261a:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <mode+0xa04>)
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	4b18      	ldr	r3, [pc, #96]	@ (8002680 <mode+0xa20>)
 8002620:	fba3 1302 	umull	r1, r3, r3, r2
 8002624:	08d9      	lsrs	r1, r3, #3
 8002626:	460b      	mov	r3, r1
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4619      	mov	r1, r3
 8002634:	2004      	movs	r0, #4
 8002636:	f7fe fb57 	bl	8000ce8 <setNumber>
				show();
 800263a:	f7fe fbe3 	bl	8000e04 <show>
				loop();
 800263e:	f7fe fc03 	bl	8000e48 <loop>
            break;
 8002642:	e000      	b.n	8002646 <mode+0x9e6>

        default:
            // Trường hợp mặc định, không xử lý gì cả
            break;
 8002644:	bf00      	nop
    }
}
 8002646:	bf00      	nop
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800264e:	bf00      	nop
 8002650:	40010800 	.word	0x40010800
 8002654:	41200000 	.word	0x41200000
 8002658:	66666667 	.word	0x66666667
 800265c:	2000002c 	.word	0x2000002c
 8002660:	200000ee 	.word	0x200000ee
 8002664:	200000ef 	.word	0x200000ef
 8002668:	200000d6 	.word	0x200000d6
 800266c:	200000f0 	.word	0x200000f0
 8002670:	200000e0 	.word	0x200000e0
 8002674:	40010c00 	.word	0x40010c00
 8002678:	200000ec 	.word	0x200000ec
 800267c:	2000010c 	.word	0x2000010c
 8002680:	cccccccd 	.word	0xcccccccd

08002684 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0310 	add.w	r3, r7, #16
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a15      	ldr	r2, [pc, #84]	@ (80026f4 <HAL_I2C_MspInit+0x70>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d123      	bne.n	80026ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a4:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <HAL_I2C_MspInit+0x74>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a13      	ldr	r2, [pc, #76]	@ (80026f8 <HAL_I2C_MspInit+0x74>)
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <HAL_I2C_MspInit+0x74>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026bc:	23c0      	movs	r3, #192	@ 0xc0
 80026be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c0:	2312      	movs	r3, #18
 80026c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c8:	f107 0310 	add.w	r3, r7, #16
 80026cc:	4619      	mov	r1, r3
 80026ce:	480b      	ldr	r0, [pc, #44]	@ (80026fc <HAL_I2C_MspInit+0x78>)
 80026d0:	f000 f8c0 	bl	8002854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026d4:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <HAL_I2C_MspInit+0x74>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	4a07      	ldr	r2, [pc, #28]	@ (80026f8 <HAL_I2C_MspInit+0x74>)
 80026da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026de:	61d3      	str	r3, [r2, #28]
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_I2C_MspInit+0x74>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026ec:	bf00      	nop
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40005400 	.word	0x40005400
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40010c00 	.word	0x40010c00

08002700 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800271e:	d123      	bne.n	8002768 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002720:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x70>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	4a12      	ldr	r2, [pc, #72]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x70>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	61d3      	str	r3, [r2, #28]
 800272c:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x70>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002738:	4b0d      	ldr	r3, [pc, #52]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x70>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a0c      	ldr	r2, [pc, #48]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x70>)
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x70>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002750:	2303      	movs	r3, #3
 8002752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	4619      	mov	r1, r3
 8002762:	4804      	ldr	r0, [pc, #16]	@ (8002774 <HAL_TIM_Encoder_MspInit+0x74>)
 8002764:	f000 f876 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002768:	bf00      	nop
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000
 8002774:	40010800 	.word	0x40010800

08002778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <NMI_Handler+0x4>

08002780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <HardFault_Handler+0x4>

08002788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <MemManage_Handler+0x4>

08002790 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <BusFault_Handler+0x4>

08002798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <UsageFault_Handler+0x4>

080027a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027d0:	f7ff fff8 	bl	80027c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d4:	480b      	ldr	r0, [pc, #44]	@ (8002804 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027d6:	490c      	ldr	r1, [pc, #48]	@ (8002808 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027d8:	4a0c      	ldr	r2, [pc, #48]	@ (800280c <LoopFillZerobss+0x16>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a09      	ldr	r2, [pc, #36]	@ (8002810 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027ec:	4c09      	ldr	r4, [pc, #36]	@ (8002814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027fa:	f001 fbc5 	bl	8003f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027fe:	f7fe fdd3 	bl	80013a8 <main>
  bx lr
 8002802:	4770      	bx	lr
  ldr r0, =_sdata
 8002804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002808:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800280c:	0800400c 	.word	0x0800400c
  ldr r2, =_sbss
 8002810:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002814:	20000114 	.word	0x20000114

08002818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002818:	e7fe      	b.n	8002818 <ADC1_2_IRQHandler>
	...

0800281c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <HAL_IncTick+0x1c>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b05      	ldr	r3, [pc, #20]	@ (800283c <HAL_IncTick+0x20>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a03      	ldr	r2, [pc, #12]	@ (800283c <HAL_IncTick+0x20>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	20000008 	.word	0x20000008
 800283c:	20000110 	.word	0x20000110

08002840 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return uwTick;
 8002844:	4b02      	ldr	r3, [pc, #8]	@ (8002850 <HAL_GetTick+0x10>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	20000110 	.word	0x20000110

08002854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002854:	b480      	push	{r7}
 8002856:	b08b      	sub	sp, #44	@ 0x2c
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002866:	e169      	b.n	8002b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002868:	2201      	movs	r2, #1
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	429a      	cmp	r2, r3
 8002882:	f040 8158 	bne.w	8002b36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4a9a      	ldr	r2, [pc, #616]	@ (8002af4 <HAL_GPIO_Init+0x2a0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d05e      	beq.n	800294e <HAL_GPIO_Init+0xfa>
 8002890:	4a98      	ldr	r2, [pc, #608]	@ (8002af4 <HAL_GPIO_Init+0x2a0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d875      	bhi.n	8002982 <HAL_GPIO_Init+0x12e>
 8002896:	4a98      	ldr	r2, [pc, #608]	@ (8002af8 <HAL_GPIO_Init+0x2a4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d058      	beq.n	800294e <HAL_GPIO_Init+0xfa>
 800289c:	4a96      	ldr	r2, [pc, #600]	@ (8002af8 <HAL_GPIO_Init+0x2a4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d86f      	bhi.n	8002982 <HAL_GPIO_Init+0x12e>
 80028a2:	4a96      	ldr	r2, [pc, #600]	@ (8002afc <HAL_GPIO_Init+0x2a8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d052      	beq.n	800294e <HAL_GPIO_Init+0xfa>
 80028a8:	4a94      	ldr	r2, [pc, #592]	@ (8002afc <HAL_GPIO_Init+0x2a8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d869      	bhi.n	8002982 <HAL_GPIO_Init+0x12e>
 80028ae:	4a94      	ldr	r2, [pc, #592]	@ (8002b00 <HAL_GPIO_Init+0x2ac>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d04c      	beq.n	800294e <HAL_GPIO_Init+0xfa>
 80028b4:	4a92      	ldr	r2, [pc, #584]	@ (8002b00 <HAL_GPIO_Init+0x2ac>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d863      	bhi.n	8002982 <HAL_GPIO_Init+0x12e>
 80028ba:	4a92      	ldr	r2, [pc, #584]	@ (8002b04 <HAL_GPIO_Init+0x2b0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d046      	beq.n	800294e <HAL_GPIO_Init+0xfa>
 80028c0:	4a90      	ldr	r2, [pc, #576]	@ (8002b04 <HAL_GPIO_Init+0x2b0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d85d      	bhi.n	8002982 <HAL_GPIO_Init+0x12e>
 80028c6:	2b12      	cmp	r3, #18
 80028c8:	d82a      	bhi.n	8002920 <HAL_GPIO_Init+0xcc>
 80028ca:	2b12      	cmp	r3, #18
 80028cc:	d859      	bhi.n	8002982 <HAL_GPIO_Init+0x12e>
 80028ce:	a201      	add	r2, pc, #4	@ (adr r2, 80028d4 <HAL_GPIO_Init+0x80>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	0800294f 	.word	0x0800294f
 80028d8:	08002929 	.word	0x08002929
 80028dc:	0800293b 	.word	0x0800293b
 80028e0:	0800297d 	.word	0x0800297d
 80028e4:	08002983 	.word	0x08002983
 80028e8:	08002983 	.word	0x08002983
 80028ec:	08002983 	.word	0x08002983
 80028f0:	08002983 	.word	0x08002983
 80028f4:	08002983 	.word	0x08002983
 80028f8:	08002983 	.word	0x08002983
 80028fc:	08002983 	.word	0x08002983
 8002900:	08002983 	.word	0x08002983
 8002904:	08002983 	.word	0x08002983
 8002908:	08002983 	.word	0x08002983
 800290c:	08002983 	.word	0x08002983
 8002910:	08002983 	.word	0x08002983
 8002914:	08002983 	.word	0x08002983
 8002918:	08002931 	.word	0x08002931
 800291c:	08002945 	.word	0x08002945
 8002920:	4a79      	ldr	r2, [pc, #484]	@ (8002b08 <HAL_GPIO_Init+0x2b4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002926:	e02c      	b.n	8002982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	623b      	str	r3, [r7, #32]
          break;
 800292e:	e029      	b.n	8002984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	3304      	adds	r3, #4
 8002936:	623b      	str	r3, [r7, #32]
          break;
 8002938:	e024      	b.n	8002984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	3308      	adds	r3, #8
 8002940:	623b      	str	r3, [r7, #32]
          break;
 8002942:	e01f      	b.n	8002984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	330c      	adds	r3, #12
 800294a:	623b      	str	r3, [r7, #32]
          break;
 800294c:	e01a      	b.n	8002984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002956:	2304      	movs	r3, #4
 8002958:	623b      	str	r3, [r7, #32]
          break;
 800295a:	e013      	b.n	8002984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002964:	2308      	movs	r3, #8
 8002966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	611a      	str	r2, [r3, #16]
          break;
 800296e:	e009      	b.n	8002984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002970:	2308      	movs	r3, #8
 8002972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	615a      	str	r2, [r3, #20]
          break;
 800297a:	e003      	b.n	8002984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800297c:	2300      	movs	r3, #0
 800297e:	623b      	str	r3, [r7, #32]
          break;
 8002980:	e000      	b.n	8002984 <HAL_GPIO_Init+0x130>
          break;
 8002982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2bff      	cmp	r3, #255	@ 0xff
 8002988:	d801      	bhi.n	800298e <HAL_GPIO_Init+0x13a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	e001      	b.n	8002992 <HAL_GPIO_Init+0x13e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2bff      	cmp	r3, #255	@ 0xff
 8002998:	d802      	bhi.n	80029a0 <HAL_GPIO_Init+0x14c>
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	e002      	b.n	80029a6 <HAL_GPIO_Init+0x152>
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	3b08      	subs	r3, #8
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	210f      	movs	r1, #15
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	401a      	ands	r2, r3
 80029b8:	6a39      	ldr	r1, [r7, #32]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	431a      	orrs	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80b1 	beq.w	8002b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029d4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b0c <HAL_GPIO_Init+0x2b8>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	4a4c      	ldr	r2, [pc, #304]	@ (8002b0c <HAL_GPIO_Init+0x2b8>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6193      	str	r3, [r2, #24]
 80029e0:	4b4a      	ldr	r3, [pc, #296]	@ (8002b0c <HAL_GPIO_Init+0x2b8>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029ec:	4a48      	ldr	r2, [pc, #288]	@ (8002b10 <HAL_GPIO_Init+0x2bc>)
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	3302      	adds	r3, #2
 80029f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	220f      	movs	r2, #15
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a40      	ldr	r2, [pc, #256]	@ (8002b14 <HAL_GPIO_Init+0x2c0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d013      	beq.n	8002a40 <HAL_GPIO_Init+0x1ec>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b18 <HAL_GPIO_Init+0x2c4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00d      	beq.n	8002a3c <HAL_GPIO_Init+0x1e8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a3e      	ldr	r2, [pc, #248]	@ (8002b1c <HAL_GPIO_Init+0x2c8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d007      	beq.n	8002a38 <HAL_GPIO_Init+0x1e4>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b20 <HAL_GPIO_Init+0x2cc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d101      	bne.n	8002a34 <HAL_GPIO_Init+0x1e0>
 8002a30:	2303      	movs	r3, #3
 8002a32:	e006      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a34:	2304      	movs	r3, #4
 8002a36:	e004      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e002      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a40:	2300      	movs	r3, #0
 8002a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a44:	f002 0203 	and.w	r2, r2, #3
 8002a48:	0092      	lsls	r2, r2, #2
 8002a4a:	4093      	lsls	r3, r2
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a52:	492f      	ldr	r1, [pc, #188]	@ (8002b10 <HAL_GPIO_Init+0x2bc>)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	3302      	adds	r3, #2
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d006      	beq.n	8002a7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	492c      	ldr	r1, [pc, #176]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4928      	ldr	r1, [pc, #160]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d006      	beq.n	8002aa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a94:	4b23      	ldr	r3, [pc, #140]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	4922      	ldr	r1, [pc, #136]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60cb      	str	r3, [r1, #12]
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aa2:	4b20      	ldr	r3, [pc, #128]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	491e      	ldr	r1, [pc, #120]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002abc:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	4918      	ldr	r1, [pc, #96]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
 8002ac8:	e006      	b.n	8002ad8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aca:	4b16      	ldr	r3, [pc, #88]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4914      	ldr	r1, [pc, #80]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d021      	beq.n	8002b28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	490e      	ldr	r1, [pc, #56]	@ (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e021      	b.n	8002b36 <HAL_GPIO_Init+0x2e2>
 8002af2:	bf00      	nop
 8002af4:	10320000 	.word	0x10320000
 8002af8:	10310000 	.word	0x10310000
 8002afc:	10220000 	.word	0x10220000
 8002b00:	10210000 	.word	0x10210000
 8002b04:	10120000 	.word	0x10120000
 8002b08:	10110000 	.word	0x10110000
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40010000 	.word	0x40010000
 8002b14:	40010800 	.word	0x40010800
 8002b18:	40010c00 	.word	0x40010c00
 8002b1c:	40011000 	.word	0x40011000
 8002b20:	40011400 	.word	0x40011400
 8002b24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_GPIO_Init+0x304>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	4909      	ldr	r1, [pc, #36]	@ (8002b58 <HAL_GPIO_Init+0x304>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	3301      	adds	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f47f ae8e 	bne.w	8002868 <HAL_GPIO_Init+0x14>
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	372c      	adds	r7, #44	@ 0x2c
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	40010400 	.word	0x40010400

08002b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	807b      	strh	r3, [r7, #2]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b6c:	787b      	ldrb	r3, [r7, #1]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b72:	887a      	ldrh	r2, [r7, #2]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b78:	e003      	b.n	8002b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b7a:	887b      	ldrh	r3, [r7, #2]
 8002b7c:	041a      	lsls	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	611a      	str	r2, [r3, #16]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e12b      	b.n	8002df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fd66 	bl	8002684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2224      	movs	r2, #36	@ 0x24
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bf0:	f001 f84c 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 8002bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4a81      	ldr	r2, [pc, #516]	@ (8002e00 <HAL_I2C_Init+0x274>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d807      	bhi.n	8002c10 <HAL_I2C_Init+0x84>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a80      	ldr	r2, [pc, #512]	@ (8002e04 <HAL_I2C_Init+0x278>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	bf94      	ite	ls
 8002c08:	2301      	movls	r3, #1
 8002c0a:	2300      	movhi	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	e006      	b.n	8002c1e <HAL_I2C_Init+0x92>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a7d      	ldr	r2, [pc, #500]	@ (8002e08 <HAL_I2C_Init+0x27c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	bf94      	ite	ls
 8002c18:	2301      	movls	r3, #1
 8002c1a:	2300      	movhi	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0e7      	b.n	8002df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a78      	ldr	r2, [pc, #480]	@ (8002e0c <HAL_I2C_Init+0x280>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0c9b      	lsrs	r3, r3, #18
 8002c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a6a      	ldr	r2, [pc, #424]	@ (8002e00 <HAL_I2C_Init+0x274>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d802      	bhi.n	8002c60 <HAL_I2C_Init+0xd4>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	e009      	b.n	8002c74 <HAL_I2C_Init+0xe8>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	4a69      	ldr	r2, [pc, #420]	@ (8002e10 <HAL_I2C_Init+0x284>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	099b      	lsrs	r3, r3, #6
 8002c72:	3301      	adds	r3, #1
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	495c      	ldr	r1, [pc, #368]	@ (8002e00 <HAL_I2C_Init+0x274>)
 8002c90:	428b      	cmp	r3, r1
 8002c92:	d819      	bhi.n	8002cc8 <HAL_I2C_Init+0x13c>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1e59      	subs	r1, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca2:	1c59      	adds	r1, r3, #1
 8002ca4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ca8:	400b      	ands	r3, r1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_I2C_Init+0x138>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1e59      	subs	r1, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc2:	e051      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e04f      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d111      	bne.n	8002cf4 <HAL_I2C_Init+0x168>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1e58      	subs	r0, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	440b      	add	r3, r1
 8002cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e012      	b.n	8002d1a <HAL_I2C_Init+0x18e>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1e58      	subs	r0, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	0099      	lsls	r1, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Init+0x196>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e022      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10e      	bne.n	8002d48 <HAL_I2C_Init+0x1bc>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1e58      	subs	r0, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	440b      	add	r3, r1
 8002d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d46:	e00f      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e58      	subs	r0, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	0099      	lsls	r1, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	6809      	ldr	r1, [r1, #0]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6911      	ldr	r1, [r2, #16]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68d2      	ldr	r2, [r2, #12]
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	000186a0 	.word	0x000186a0
 8002e04:	001e847f 	.word	0x001e847f
 8002e08:	003d08ff 	.word	0x003d08ff
 8002e0c:	431bde83 	.word	0x431bde83
 8002e10:	10624dd3 	.word	0x10624dd3

08002e14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	817b      	strh	r3, [r7, #10]
 8002e26:	460b      	mov	r3, r1
 8002e28:	813b      	strh	r3, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e2e:	f7ff fd07 	bl	8002840 <HAL_GetTick>
 8002e32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	f040 80d9 	bne.w	8002ff4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2319      	movs	r3, #25
 8002e48:	2201      	movs	r2, #1
 8002e4a:	496d      	ldr	r1, [pc, #436]	@ (8003000 <HAL_I2C_Mem_Write+0x1ec>)
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fcc1 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0cc      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Mem_Write+0x56>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0c5      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d007      	beq.n	8002e90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2221      	movs	r2, #33	@ 0x21
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a4d      	ldr	r2, [pc, #308]	@ (8003004 <HAL_I2C_Mem_Write+0x1f0>)
 8002ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ed2:	88f8      	ldrh	r0, [r7, #6]
 8002ed4:	893a      	ldrh	r2, [r7, #8]
 8002ed6:	8979      	ldrh	r1, [r7, #10]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 faf8 	bl	80034d8 <I2C_RequestMemoryWrite>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d052      	beq.n	8002f94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e081      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fd86 	bl	8003a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d107      	bne.n	8002f1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06b      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d11b      	bne.n	8002f94 <HAL_I2C_Mem_Write+0x180>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d017      	beq.n	8002f94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	781a      	ldrb	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1aa      	bne.n	8002ef2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fd79 	bl	8003a98 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d107      	bne.n	8002fc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e016      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e000      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
  }
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	00100002 	.word	0x00100002
 8003004:	ffff0000 	.word	0xffff0000

08003008 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08c      	sub	sp, #48	@ 0x30
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	461a      	mov	r2, r3
 8003016:	4603      	mov	r3, r0
 8003018:	817b      	strh	r3, [r7, #10]
 800301a:	460b      	mov	r3, r1
 800301c:	813b      	strh	r3, [r7, #8]
 800301e:	4613      	mov	r3, r2
 8003020:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003026:	f7ff fc0b 	bl	8002840 <HAL_GetTick>
 800302a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b20      	cmp	r3, #32
 8003036:	f040 8244 	bne.w	80034c2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	2319      	movs	r3, #25
 8003040:	2201      	movs	r2, #1
 8003042:	4982      	ldr	r1, [pc, #520]	@ (800324c <HAL_I2C_Mem_Read+0x244>)
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fbc5 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
 8003052:	e237      	b.n	80034c4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_I2C_Mem_Read+0x5a>
 800305e:	2302      	movs	r3, #2
 8003060:	e230      	b.n	80034c4 <HAL_I2C_Mem_Read+0x4bc>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d007      	beq.n	8003088 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003096:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2222      	movs	r2, #34	@ 0x22
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2240      	movs	r2, #64	@ 0x40
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80030b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a62      	ldr	r2, [pc, #392]	@ (8003250 <HAL_I2C_Mem_Read+0x248>)
 80030c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030ca:	88f8      	ldrh	r0, [r7, #6]
 80030cc:	893a      	ldrh	r2, [r7, #8]
 80030ce:	8979      	ldrh	r1, [r7, #10]
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	4603      	mov	r3, r0
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fa92 	bl	8003604 <I2C_RequestMemoryRead>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e1ec      	b.n	80034c4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d113      	bne.n	800311a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e1c0      	b.n	800349c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311e:	2b01      	cmp	r3, #1
 8003120:	d11e      	bne.n	8003160 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003130:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003132:	b672      	cpsid	i
}
 8003134:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800315c:	b662      	cpsie	i
}
 800315e:	e035      	b.n	80031cc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003164:	2b02      	cmp	r3, #2
 8003166:	d11e      	bne.n	80031a6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003176:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003178:	b672      	cpsid	i
}
 800317a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031a2:	b662      	cpsie	i
}
 80031a4:	e012      	b.n	80031cc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031b4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80031cc:	e166      	b.n	800349c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	f200 811f 	bhi.w	8003416 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d123      	bne.n	8003228 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 fc9f 	bl	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e167      	b.n	80034c4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003226:	e139      	b.n	800349c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	2b02      	cmp	r3, #2
 800322e:	d152      	bne.n	80032d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003236:	2200      	movs	r2, #0
 8003238:	4906      	ldr	r1, [pc, #24]	@ (8003254 <HAL_I2C_Mem_Read+0x24c>)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 faca 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e13c      	b.n	80034c4 <HAL_I2C_Mem_Read+0x4bc>
 800324a:	bf00      	nop
 800324c:	00100002 	.word	0x00100002
 8003250:	ffff0000 	.word	0xffff0000
 8003254:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003258:	b672      	cpsid	i
}
 800325a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800326a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800329e:	b662      	cpsie	i
}
 80032a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032d4:	e0e2      	b.n	800349c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032dc:	2200      	movs	r2, #0
 80032de:	497b      	ldr	r1, [pc, #492]	@ (80034cc <HAL_I2C_Mem_Read+0x4c4>)
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fa77 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0e9      	b.n	80034c4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003300:	b672      	cpsid	i
}
 8003302:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003336:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <HAL_I2C_Mem_Read+0x4c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	08db      	lsrs	r3, r3, #3
 800333c:	4a65      	ldr	r2, [pc, #404]	@ (80034d4 <HAL_I2C_Mem_Read+0x4cc>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0a1a      	lsrs	r2, r3, #8
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00da      	lsls	r2, r3, #3
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	3b01      	subs	r3, #1
 8003354:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d118      	bne.n	800338e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800337e:	b662      	cpsie	i
}
 8003380:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e09a      	b.n	80034c4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b04      	cmp	r3, #4
 800339a:	d1d9      	bne.n	8003350 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033de:	b662      	cpsie	i
}
 80033e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003414:	e042      	b.n	800349c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003418:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fb84 	bl	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e04c      	b.n	80034c4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d118      	bne.n	800349c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f47f ae94 	bne.w	80031ce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e000      	b.n	80034c4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
  }
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3728      	adds	r7, #40	@ 0x28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	00010004 	.word	0x00010004
 80034d0:	20000004 	.word	0x20000004
 80034d4:	14f8b589 	.word	0x14f8b589

080034d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	4608      	mov	r0, r1
 80034e2:	4611      	mov	r1, r2
 80034e4:	461a      	mov	r2, r3
 80034e6:	4603      	mov	r3, r0
 80034e8:	817b      	strh	r3, [r7, #10]
 80034ea:	460b      	mov	r3, r1
 80034ec:	813b      	strh	r3, [r7, #8]
 80034ee:	4613      	mov	r3, r2
 80034f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003500:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	2200      	movs	r2, #0
 800350a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f960 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003528:	d103      	bne.n	8003532 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003530:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e05f      	b.n	80035f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003544:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	6a3a      	ldr	r2, [r7, #32]
 800354a:	492d      	ldr	r1, [pc, #180]	@ (8003600 <I2C_RequestMemoryWrite+0x128>)
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f9bb 	bl	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e04c      	b.n	80035f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003574:	6a39      	ldr	r1, [r7, #32]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fa46 	bl	8003a08 <I2C_WaitOnTXEFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00d      	beq.n	800359e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	2b04      	cmp	r3, #4
 8003588:	d107      	bne.n	800359a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003598:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e02b      	b.n	80035f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d105      	bne.n	80035b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035a4:	893b      	ldrh	r3, [r7, #8]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	611a      	str	r2, [r3, #16]
 80035ae:	e021      	b.n	80035f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035b0:	893b      	ldrh	r3, [r7, #8]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c0:	6a39      	ldr	r1, [r7, #32]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fa20 	bl	8003a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d107      	bne.n	80035e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e005      	b.n	80035f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035ea:	893b      	ldrh	r3, [r7, #8]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	00010002 	.word	0x00010002

08003604 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	4608      	mov	r0, r1
 800360e:	4611      	mov	r1, r2
 8003610:	461a      	mov	r2, r3
 8003612:	4603      	mov	r3, r0
 8003614:	817b      	strh	r3, [r7, #10]
 8003616:	460b      	mov	r3, r1
 8003618:	813b      	strh	r3, [r7, #8]
 800361a:	4613      	mov	r3, r2
 800361c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800362c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800363c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	2200      	movs	r2, #0
 8003646:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f8c2 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00d      	beq.n	8003672 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003664:	d103      	bne.n	800366e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800366c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0aa      	b.n	80037c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003672:	897b      	ldrh	r3, [r7, #10]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003680:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003684:	6a3a      	ldr	r2, [r7, #32]
 8003686:	4952      	ldr	r1, [pc, #328]	@ (80037d0 <I2C_RequestMemoryRead+0x1cc>)
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f91d 	bl	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e097      	b.n	80037c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b0:	6a39      	ldr	r1, [r7, #32]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f9a8 	bl	8003a08 <I2C_WaitOnTXEFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d107      	bne.n	80036d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e076      	b.n	80037c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d105      	bne.n	80036ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036e0:	893b      	ldrh	r3, [r7, #8]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	611a      	str	r2, [r3, #16]
 80036ea:	e021      	b.n	8003730 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036ec:	893b      	ldrh	r3, [r7, #8]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fc:	6a39      	ldr	r1, [r7, #32]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f982 	bl	8003a08 <I2C_WaitOnTXEFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00d      	beq.n	8003726 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	2b04      	cmp	r3, #4
 8003710:	d107      	bne.n	8003722 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003720:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e050      	b.n	80037c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003726:	893b      	ldrh	r3, [r7, #8]
 8003728:	b2da      	uxtb	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003732:	6a39      	ldr	r1, [r7, #32]
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f967 	bl	8003a08 <I2C_WaitOnTXEFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00d      	beq.n	800375c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	2b04      	cmp	r3, #4
 8003746:	d107      	bne.n	8003758 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003756:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e035      	b.n	80037c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800376a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	2200      	movs	r2, #0
 8003774:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f82b 	bl	80037d4 <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003792:	d103      	bne.n	800379c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e013      	b.n	80037c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037a0:	897b      	ldrh	r3, [r7, #10]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	6a3a      	ldr	r2, [r7, #32]
 80037b4:	4906      	ldr	r1, [pc, #24]	@ (80037d0 <I2C_RequestMemoryRead+0x1cc>)
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f886 	bl	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	00010002 	.word	0x00010002

080037d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e4:	e048      	b.n	8003878 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d044      	beq.n	8003878 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ee:	f7ff f827 	bl	8002840 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d302      	bcc.n	8003804 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d139      	bne.n	8003878 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	0c1b      	lsrs	r3, r3, #16
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d10d      	bne.n	800382a <I2C_WaitOnFlagUntilTimeout+0x56>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	43da      	mvns	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	4013      	ands	r3, r2
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	e00c      	b.n	8003844 <I2C_WaitOnFlagUntilTimeout+0x70>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	43da      	mvns	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	429a      	cmp	r2, r3
 8003848:	d116      	bne.n	8003878 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	f043 0220 	orr.w	r2, r3, #32
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e023      	b.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10d      	bne.n	800389e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	43da      	mvns	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4013      	ands	r3, r2
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	e00c      	b.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	43da      	mvns	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4013      	ands	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d093      	beq.n	80037e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038d6:	e071      	b.n	80039bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e6:	d123      	bne.n	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003900:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	f043 0204 	orr.w	r2, r3, #4
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e067      	b.n	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d041      	beq.n	80039bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003938:	f7fe ff82 	bl	8002840 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	429a      	cmp	r2, r3
 8003946:	d302      	bcc.n	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d136      	bne.n	80039bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	d10c      	bne.n	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	43da      	mvns	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4013      	ands	r3, r2
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	bf14      	ite	ne
 800396a:	2301      	movne	r3, #1
 800396c:	2300      	moveq	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	e00b      	b.n	800398a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	43da      	mvns	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4013      	ands	r3, r2
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf14      	ite	ne
 8003984:	2301      	movne	r3, #1
 8003986:	2300      	moveq	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d016      	beq.n	80039bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e021      	b.n	8003a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10c      	bne.n	80039e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	43da      	mvns	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e00b      	b.n	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	43da      	mvns	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4013      	ands	r3, r2
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	bf14      	ite	ne
 80039f2:	2301      	movne	r3, #1
 80039f4:	2300      	moveq	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f47f af6d 	bne.w	80038d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a14:	e034      	b.n	8003a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f8e3 	bl	8003be2 <I2C_IsAcknowledgeFailed>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e034      	b.n	8003a90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d028      	beq.n	8003a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7fe ff07 	bl	8002840 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d11d      	bne.n	8003a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a4e:	2b80      	cmp	r3, #128	@ 0x80
 8003a50:	d016      	beq.n	8003a80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	f043 0220 	orr.w	r2, r3, #32
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e007      	b.n	8003a90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8a:	2b80      	cmp	r3, #128	@ 0x80
 8003a8c:	d1c3      	bne.n	8003a16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aa4:	e034      	b.n	8003b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f89b 	bl	8003be2 <I2C_IsAcknowledgeFailed>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e034      	b.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d028      	beq.n	8003b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003abe:	f7fe febf 	bl	8002840 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d302      	bcc.n	8003ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d11d      	bne.n	8003b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d016      	beq.n	8003b10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e007      	b.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d1c3      	bne.n	8003aa6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b34:	e049      	b.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d119      	bne.n	8003b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0210 	mvn.w	r2, #16
 8003b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e030      	b.n	8003bda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b78:	f7fe fe62 	bl	8002840 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d302      	bcc.n	8003b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11d      	bne.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b98:	2b40      	cmp	r3, #64	@ 0x40
 8003b9a:	d016      	beq.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	f043 0220 	orr.w	r2, r3, #32
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e007      	b.n	8003bda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd4:	2b40      	cmp	r3, #64	@ 0x40
 8003bd6:	d1ae      	bne.n	8003b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf8:	d11b      	bne.n	8003c32 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c02:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003c4c:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	4a08      	ldr	r2, [pc, #32]	@ (8003c74 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003c52:	f023 0304 	bic.w	r3, r3, #4
 8003c56:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003c5e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003c60:	e002      	b.n	8003c68 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8003c62:	bf40      	sev
    __WFE();
 8003c64:	bf20      	wfe
    __WFE();
 8003c66:	bf20      	wfe
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c7c:	4b02      	ldr	r3, [pc, #8]	@ (8003c88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	20000004 	.word	0x20000004

08003c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c90:	f7ff fff2 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	@ (8003cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	@ (8003cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	08003ffc 	.word	0x08003ffc

08003cb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e093      	b.n	8003df0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fe fd0f 	bl	8002700 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cf8:	f023 0307 	bic.w	r3, r3, #7
 8003cfc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f000 f875 	bl	8003df8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d36:	f023 0303 	bic.w	r3, r3, #3
 8003d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	4313      	orrs	r3, r2
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003d54:	f023 030c 	bic.w	r3, r3, #12
 8003d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	4313      	orrs	r3, r2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	011a      	lsls	r2, r3, #4
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	031b      	lsls	r3, r3, #12
 8003d84:	4313      	orrs	r3, r2
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a29      	ldr	r2, [pc, #164]	@ (8003eb0 <TIM_Base_SetConfig+0xb8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00b      	beq.n	8003e28 <TIM_Base_SetConfig+0x30>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e16:	d007      	beq.n	8003e28 <TIM_Base_SetConfig+0x30>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a26      	ldr	r2, [pc, #152]	@ (8003eb4 <TIM_Base_SetConfig+0xbc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d003      	beq.n	8003e28 <TIM_Base_SetConfig+0x30>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a25      	ldr	r2, [pc, #148]	@ (8003eb8 <TIM_Base_SetConfig+0xc0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d108      	bne.n	8003e3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb0 <TIM_Base_SetConfig+0xb8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00b      	beq.n	8003e5a <TIM_Base_SetConfig+0x62>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e48:	d007      	beq.n	8003e5a <TIM_Base_SetConfig+0x62>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a19      	ldr	r2, [pc, #100]	@ (8003eb4 <TIM_Base_SetConfig+0xbc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d003      	beq.n	8003e5a <TIM_Base_SetConfig+0x62>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a18      	ldr	r2, [pc, #96]	@ (8003eb8 <TIM_Base_SetConfig+0xc0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d108      	bne.n	8003e6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a07      	ldr	r2, [pc, #28]	@ (8003eb0 <TIM_Base_SetConfig+0xb8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d103      	bne.n	8003ea0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	615a      	str	r2, [r3, #20]
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800

08003ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e046      	b.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a16      	ldr	r2, [pc, #88]	@ (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00e      	beq.n	8003f36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f20:	d009      	beq.n	8003f36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a12      	ldr	r2, [pc, #72]	@ (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a10      	ldr	r2, [pc, #64]	@ (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10c      	bne.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800

08003f78 <memset>:
 8003f78:	4603      	mov	r3, r0
 8003f7a:	4402      	add	r2, r0
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d100      	bne.n	8003f82 <memset+0xa>
 8003f80:	4770      	bx	lr
 8003f82:	f803 1b01 	strb.w	r1, [r3], #1
 8003f86:	e7f9      	b.n	8003f7c <memset+0x4>

08003f88 <__libc_init_array>:
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	2600      	movs	r6, #0
 8003f8c:	4d0c      	ldr	r5, [pc, #48]	@ (8003fc0 <__libc_init_array+0x38>)
 8003f8e:	4c0d      	ldr	r4, [pc, #52]	@ (8003fc4 <__libc_init_array+0x3c>)
 8003f90:	1b64      	subs	r4, r4, r5
 8003f92:	10a4      	asrs	r4, r4, #2
 8003f94:	42a6      	cmp	r6, r4
 8003f96:	d109      	bne.n	8003fac <__libc_init_array+0x24>
 8003f98:	f000 f81a 	bl	8003fd0 <_init>
 8003f9c:	2600      	movs	r6, #0
 8003f9e:	4d0a      	ldr	r5, [pc, #40]	@ (8003fc8 <__libc_init_array+0x40>)
 8003fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8003fcc <__libc_init_array+0x44>)
 8003fa2:	1b64      	subs	r4, r4, r5
 8003fa4:	10a4      	asrs	r4, r4, #2
 8003fa6:	42a6      	cmp	r6, r4
 8003fa8:	d105      	bne.n	8003fb6 <__libc_init_array+0x2e>
 8003faa:	bd70      	pop	{r4, r5, r6, pc}
 8003fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb0:	4798      	blx	r3
 8003fb2:	3601      	adds	r6, #1
 8003fb4:	e7ee      	b.n	8003f94 <__libc_init_array+0xc>
 8003fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fba:	4798      	blx	r3
 8003fbc:	3601      	adds	r6, #1
 8003fbe:	e7f2      	b.n	8003fa6 <__libc_init_array+0x1e>
 8003fc0:	08004004 	.word	0x08004004
 8003fc4:	08004004 	.word	0x08004004
 8003fc8:	08004004 	.word	0x08004004
 8003fcc:	08004008 	.word	0x08004008

08003fd0 <_init>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	bf00      	nop
 8003fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd6:	bc08      	pop	{r3}
 8003fd8:	469e      	mov	lr, r3
 8003fda:	4770      	bx	lr

08003fdc <_fini>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	bf00      	nop
 8003fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe2:	bc08      	pop	{r3}
 8003fe4:	469e      	mov	lr, r3
 8003fe6:	4770      	bx	lr
